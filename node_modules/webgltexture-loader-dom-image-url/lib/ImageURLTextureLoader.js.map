{"version":3,"sources":["../src/ImageURLTextureLoader.js"],"names":["loadImage","src","success","failure","img","window","Image","slice","crossOrigin","onload","onabort","onerror","ImageURLTextureLoader","WebGLTextureLoaderAsyncHashCache","canLoad","input","inputHash","loadNoCache","gl","dispose","promise","Promise","then","width","height","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","globalRegistry","add"],"mappings":";;;;;;;AACA;;AAKA,SAASA,SAAT,CACEC,GADF,EAEEC,OAFF,EAGEC,OAHF,EAIE;AACA,MAAIC,GAAG,GAAG,IAAIC,MAAM,CAACC,KAAX,EAAV;;AACA,MAAIL,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,OAAxB,EAAiC;AAC/BH,IAAAA,GAAG,CAACI,WAAJ,GAAkB,IAAlB;AACD;;AACDJ,EAAAA,GAAG,CAACK,MAAJ,GAAa,YAAW;AACtB,QAAIL,GAAJ,EAAS;AACPF,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD;;AACDA,IAAAA,GAAG,GAAG,IAAN;AACD,GALD;;AAMAA,EAAAA,GAAG,CAACM,OAAJ,GAAcN,GAAG,CAACO,OAAJ,GAAcR,OAA5B;AACAC,EAAAA,GAAG,CAACH,GAAJ,GAAUA,GAAV;AACA,SAAO,YAAW;AAChB,QAAIG,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACK,MAAJ,GAAa,IAAb;AACAL,MAAAA,GAAG,CAACO,OAAJ,GAAc,IAAd;AACAP,MAAAA,GAAG,CAACM,OAAJ,GAAc,IAAd;AACAN,MAAAA,GAAG,CAACH,GAAJ,GAAU,EAAV;AACAG,MAAAA,GAAG,GAAG,IAAN;AACD;AACF,GARD;AASD;;AACD,MAAMQ,qBAAN,SAAoCC,oDAApC,CAA6E;AAC3EC,EAAAA,OAAO,CAACC,KAAD,EAAa;AAClB,WAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AAEDC,EAAAA,SAAS,CAACD,KAAD,EAAgB;AACvB,WAAOA,KAAP;AACD;;AAEDE,EAAAA,WAAW,CAAChB,GAAD,EAAc;AACvB,UAAM;AAAEiB,MAAAA;AAAF,QAAS,IAAf;AACA,QAAIC,OAAJ;AACA,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CACd,CAACnB,OAAD,EAAUC,OAAV,KAAuBgB,OAAO,GAAGnB,SAAS,CAACC,GAAD,EAAMC,OAAN,EAAeC,OAAf,CAD5B,EAEdmB,IAFc,CAETlB,GAAG,IAAI;AACZ,YAAM;AAAEmB,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBpB,GAA1B;AACA,YAAMqB,OAAO,GAAGP,EAAE,CAACQ,aAAH,EAAhB;AACAR,MAAAA,EAAE,CAACS,WAAH,CAAeT,EAAE,CAACU,UAAlB,EAA8BH,OAA9B;AACAP,MAAAA,EAAE,CAACW,UAAH,CAAcX,EAAE,CAACU,UAAjB,EAA6B,CAA7B,EAAgCV,EAAE,CAACY,IAAnC,EAAyCZ,EAAE,CAACY,IAA5C,EAAkDZ,EAAE,CAACa,aAArD,EAAoE3B,GAApE;AACA,aAAO;AAAEqB,QAAAA,OAAF;AAAWF,QAAAA,KAAX;AAAkBC,QAAAA;AAAlB,OAAP;AACD,KARe,CAAhB;AASA,WAAO;AAAEJ,MAAAA,OAAF;AAAWD,MAAAA,OAAO,EAAE,MAAMA,OAAO;AAAjC,KAAP;AACD;;AAtB0E;;AAyB7Ea,mCAAeC,GAAf,CAAmBrB,qBAAnB;;eAEeA,qB","sourcesContent":["//@flow\nimport {\n  globalRegistry,\n  WebGLTextureLoaderAsyncHashCache\n} from \"webgltexture-loader\";\n\nfunction loadImage(\n  src: string,\n  success: (img: Image) => void,\n  failure: (e: Error) => void\n) {\n  let img = new window.Image();\n  if (src.slice(0, 5) !== \"data:\") {\n    img.crossOrigin = true;\n  }\n  img.onload = function() {\n    if (img) {\n      success(img);\n    }\n    img = null;\n  };\n  img.onabort = img.onerror = failure;\n  img.src = src;\n  return function() {\n    if (img) {\n      img.onload = null;\n      img.onerror = null;\n      img.onabort = null;\n      img.src = \"\";\n      img = null;\n    }\n  };\n}\nclass ImageURLTextureLoader extends WebGLTextureLoaderAsyncHashCache<string> {\n  canLoad(input: any) {\n    return typeof input === \"string\";\n  }\n\n  inputHash(input: string) {\n    return input;\n  }\n\n  loadNoCache(src: string) {\n    const { gl } = this;\n    let dispose;\n    const promise = new Promise(\n      (success, failure) => (dispose = loadImage(src, success, failure))\n    ).then(img => {\n      const { width, height } = img;\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n      return { texture, width, height };\n    });\n    return { promise, dispose: () => dispose() };\n  }\n}\n\nglobalRegistry.add(ImageURLTextureLoader);\n\nexport default ImageURLTextureLoader;\n"],"file":"ImageURLTextureLoader.js"}