{"version":3,"sources":["../src/VideoTextureLoader.js"],"names":["VideoTextureLoader","WebGLTextureLoaderAsyncHashCache","canLoad","input","HTMLVideoElement","inputHash","loadNoCache","gl","width","height","timeout","dispose","clearTimeout","promise","Promise","resolve","reject","checkVideoReady","videoWidth","texture","createTexture","videoHeight","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","setTimeout","update","res","get","globalRegistry","add"],"mappings":";;;;;;;AACA;;AAKA,MAAMA,kBAAN,SAAiCC,oDAAjC,CAEE;AACAC,EAAAA,OAAO,CAACC,KAAD,EAAa;AAClB,WAAOA,KAAK,YAAYC,gBAAxB;AACD;;AAEDC,EAAAA,SAAS,CAACF,KAAD,EAA0B;AACjC,WAAOA,KAAP;AACD;;AAEDG,EAAAA,WAAW,CAACH,KAAD,EAA0B;AACnC,UAAM;AAAEI,MAAAA;AAAF,QAAS,IAAf;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBN,KAA1B;AAEA,QAAIO,OAAJ;;AACA,UAAMC,OAAO,GAAG,MAAM;AACpBC,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;;AAIA,UAAMG,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/C,YAAMC,eAAe,GAAG,MAAM;AAC5B,YAAId,KAAK,CAACe,UAAN,GAAmB,CAAvB,EAA0B;AACxB,gBAAMC,OAAO,GAAGZ,EAAE,CAACa,aAAH,EAAhB;AACA,gBAAM;AAAEF,YAAAA,UAAU,EAAEV,KAAd;AAAqBa,YAAAA,WAAW,EAAEZ;AAAlC,cAA6CN,KAAnD;AACAI,UAAAA,EAAE,CAACe,WAAH,CAAef,EAAE,CAACgB,UAAlB,EAA8BJ,OAA9B;AACAZ,UAAAA,EAAE,CAACiB,UAAH,CACEjB,EAAE,CAACgB,UADL,EAEE,CAFF,EAGEhB,EAAE,CAACkB,IAHL,EAIElB,EAAE,CAACkB,IAJL,EAKElB,EAAE,CAACmB,aALL,EAMEvB,KANF;AAQAY,UAAAA,OAAO,CAAC;AACNI,YAAAA,OADM;AAENX,YAAAA,KAFM;AAGNC,YAAAA;AAHM,WAAD,CAAP;AAKD,SAjBD,MAiBO;AACLC,UAAAA,OAAO,GAAGiB,UAAU,CAACV,eAAD,EAAkB,GAAlB,CAApB;AACD;AACF,OArBD;;AAsBAA,MAAAA,eAAe;AAChB,KAxBe,CAAhB;AA0BA,WAAO;AAAEN,MAAAA,OAAF;AAAWE,MAAAA;AAAX,KAAP;AACD;;AAEDe,EAAAA,MAAM,CAACzB,KAAD,EAA0B;AAC9B,UAAM;AAAEI,MAAAA;AAAF,QAAS,IAAf;AACA,UAAMsB,GAAG,GAAG,KAAKC,GAAL,CAAS3B,KAAT,CAAZ;AACA,QAAI,CAAC0B,GAAL,EAAU;AACVtB,IAAAA,EAAE,CAACe,WAAH,CAAef,EAAE,CAACgB,UAAlB,EAA8BM,GAAG,CAACV,OAAlC;AACAZ,IAAAA,EAAE,CAACiB,UAAH,CAAcjB,EAAE,CAACgB,UAAjB,EAA6B,CAA7B,EAAgChB,EAAE,CAACkB,IAAnC,EAAyClB,EAAE,CAACkB,IAA5C,EAAkDlB,EAAE,CAACmB,aAArD,EAAoEvB,KAApE;AACD;;AArDD;;AAwDF4B,mCAAeC,GAAf,CAAmBhC,kBAAnB;;eAEeA,kB","sourcesContent":["//@flow\nimport {\n  WebGLTextureLoaderAsyncHashCache,\n  globalRegistry\n} from \"webgltexture-loader\";\n\nclass VideoTextureLoader extends WebGLTextureLoaderAsyncHashCache<\n  HTMLVideoElement\n> {\n  canLoad(input: any) {\n    return input instanceof HTMLVideoElement;\n  }\n\n  inputHash(input: HTMLVideoElement) {\n    return input;\n  }\n\n  loadNoCache(input: HTMLVideoElement) {\n    const { gl } = this;\n    const { width, height } = input;\n\n    let timeout;\n    const dispose = () => {\n      clearTimeout(timeout);\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      const checkVideoReady = () => {\n        if (input.videoWidth > 0) {\n          const texture = gl.createTexture();\n          const { videoWidth: width, videoHeight: height } = input;\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            input\n          );\n          resolve({\n            texture,\n            width,\n            height\n          });\n        } else {\n          timeout = setTimeout(checkVideoReady, 100);\n        }\n      };\n      checkVideoReady();\n    });\n\n    return { dispose, promise };\n  }\n\n  update(input: HTMLVideoElement) {\n    const { gl } = this;\n    const res = this.get(input);\n    if (!res) return;\n    gl.bindTexture(gl.TEXTURE_2D, res.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n  }\n}\n\nglobalRegistry.add(VideoTextureLoader);\n\nexport default VideoTextureLoader;\n"],"file":"VideoTextureLoader.js"}