{"version":3,"sources":["../src/Uniform.js"],"names":["Uniform","Backbuffer","backbufferFrom","node","type","Resolution","textureSize","obj","textureSizeRatio","ratio"],"mappings":";;;;;;;AAIA;AACA;AACA;AACA,MAAMA,OAAO,GAAG;AACd;AACF;AACA;AACEC,EAAAA,UAAU,EAAE,cAJE;;AAMd;AACF;AACA;AACA;AACEC,EAAAA,cAAc,EAAGC,IAAD,KAAuB;AAAEC,IAAAA,IAAI,EAAE,gBAAR;AAA0BD,IAAAA;AAA1B,GAAvB,CAVF;;AAYd;AACF;AACA;AACEE,EAAAA,UAAU,EAAE,cAfE;;AAgBd;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAGC,GAAD,KAAa;AAAEH,IAAAA,IAAI,EAAE,aAAR;AAAuBG,IAAAA;AAAvB,GAAb,CApBC;;AAqBd;AACF;AACA;AACA;AACEC,EAAAA,gBAAgB,EAAGD,GAAD,KAAa;AAAEH,IAAAA,IAAI,EAAE,aAAR;AAAuBG,IAAAA,GAAvB;AAA4BE,IAAAA,KAAK,EAAE;AAAnC,GAAb;AAzBJ,CAAhB;eA4BeT,O","sourcesContent":["//@flow\nimport type Node from \"./Node\";\nimport type Bus from \"./Bus\";\n\n/**\n * A set of Uniform symbols you can pass to a uniform. (recognized and interpreted by Node)\n */\nconst Uniform = {\n  /**\n   * Inject the texture of the previous framebuffer state\n   */\n  Backbuffer: \"_Backbuffer_\",\n\n  /**\n   * Inject the texture of the previous framebuffer state of another Node pointed by its reference.\n   * @param  {Node | Bus} a Node or Bus instance of what you want the backbuffer from. the Node needs to have backbuffering enabled. (in case of Bus, it means its root Node)\n   */\n  backbufferFrom: (node: Node | Bus) => ({ type: \"BackbufferFrom\", node }),\n\n  /**\n   * the framebuffer size itself\n   */\n  Resolution: \"_Resolution_\",\n  /**\n   * Inject the size of a given Texture input\n   * @param {any} obj the texture input object\n   */\n  textureSize: (obj: *) => ({ type: \"TextureSize\", obj }),\n  /**\n   * Inject the width/height ratio of a given Texture input\n   * @param {any} obj the texture input object\n   */\n  textureSizeRatio: (obj: *) => ({ type: \"TextureSize\", obj, ratio: true }),\n};\n\nexport default Uniform;\n"],"file":"Uniform.js"}