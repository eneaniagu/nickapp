"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webgltextureLoader = require("webgltexture-loader");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CanvasTextureLoader extends _webgltextureLoader.WebGLTextureLoaderSyncHashCache {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "disposes", {});
  }

  canLoad(input) {
    return input instanceof HTMLCanvasElement;
  }

  inputHash(input) {
    return input;
  }

  getNoCache(input) {
    const {
      gl
    } = this;
    const {
      width,
      height
    } = input;
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);
    return {
      texture,
      width,
      height
    };
  }

  update(input) {
    const {
      gl
    } = this;
    const {
      texture
    } = this.get(input);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);
  }

}

_webgltextureLoader.globalRegistry.add(CanvasTextureLoader);

var _default = CanvasTextureLoader;
exports.default = _default;
//# sourceMappingURL=CanvasTextureLoader.js.map