{"version":3,"sources":["../src/CanvasTextureLoader.js"],"names":["CanvasTextureLoader","WebGLTextureLoaderSyncHashCache","canLoad","input","HTMLCanvasElement","inputHash","getNoCache","gl","width","height","texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","update","get","globalRegistry","add"],"mappings":";;;;;;;AACA;;;;AAKA,MAAMA,mBAAN,SAAkCC,mDAAlC,CAEE;AAAA;AAAA;;AAAA,sCACW,EADX;AAAA;;AAGAC,EAAAA,OAAO,CAACC,KAAD,EAAa;AAClB,WAAOA,KAAK,YAAYC,iBAAxB;AACD;;AAEDC,EAAAA,SAAS,CAACF,KAAD,EAA2B;AAClC,WAAOA,KAAP;AACD;;AAEDG,EAAAA,UAAU,CAACH,KAAD,EAA2B;AACnC,UAAM;AAAEI,MAAAA;AAAF,QAAS,IAAf;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBN,KAA1B;AACA,UAAMO,OAAO,GAAGH,EAAE,CAACI,aAAH,EAAhB;AACAJ,IAAAA,EAAE,CAACK,WAAH,CAAeL,EAAE,CAACM,UAAlB,EAA8BH,OAA9B;AACAH,IAAAA,EAAE,CAACO,UAAH,CAAcP,EAAE,CAACM,UAAjB,EAA6B,CAA7B,EAAgCN,EAAE,CAACQ,IAAnC,EAAyCR,EAAE,CAACQ,IAA5C,EAAkDR,EAAE,CAACS,aAArD,EAAoEb,KAApE;AACA,WAAO;AAAEO,MAAAA,OAAF;AAAWF,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAP;AACD;;AAEDQ,EAAAA,MAAM,CAACd,KAAD,EAA2B;AAC/B,UAAM;AAAEI,MAAAA;AAAF,QAAS,IAAf;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAc,KAAKQ,GAAL,CAASf,KAAT,CAApB;AACAI,IAAAA,EAAE,CAACK,WAAH,CAAeL,EAAE,CAACM,UAAlB,EAA8BH,OAA9B;AACAH,IAAAA,EAAE,CAACO,UAAH,CAAcP,EAAE,CAACM,UAAjB,EAA6B,CAA7B,EAAgCN,EAAE,CAACQ,IAAnC,EAAyCR,EAAE,CAACQ,IAA5C,EAAkDR,EAAE,CAACS,aAArD,EAAoEb,KAApE;AACD;;AAzBD;;AA4BFgB,mCAAeC,GAAf,CAAmBpB,mBAAnB;;eAEeA,mB","sourcesContent":["//@flow\nimport {\n  WebGLTextureLoaderSyncHashCache,\n  globalRegistry\n} from \"webgltexture-loader\";\n\nclass CanvasTextureLoader extends WebGLTextureLoaderSyncHashCache<\n  HTMLCanvasElement\n> {\n  disposes = {};\n\n  canLoad(input: any) {\n    return input instanceof HTMLCanvasElement;\n  }\n\n  inputHash(input: HTMLCanvasElement) {\n    return input;\n  }\n\n  getNoCache(input: HTMLCanvasElement) {\n    const { gl } = this;\n    const { width, height } = input;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n    return { texture, width, height };\n  }\n\n  update(input: HTMLCanvasElement) {\n    const { gl } = this;\n    const { texture } = this.get(input);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, input);\n  }\n}\n\nglobalRegistry.add(CanvasTextureLoader);\n\nexport default CanvasTextureLoader;\n"],"file":"CanvasTextureLoader.js"}