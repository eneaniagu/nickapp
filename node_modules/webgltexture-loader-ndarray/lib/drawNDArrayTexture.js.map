{"version":3,"sources":["../src/drawNDArrayTexture.js"],"names":["Buffer","global","b","isPacked","shape","stride","length","convertFloatToUint8","out","inp","ops","muls","gl","texture","array","floatSupported","isWebGL1","WebGLRenderingContext","dtype","slice","maxSize","getParameter","MAX_TEXTURE_SIZE","Error","packed","type","FLOAT","UNSIGNED_BYTE","format","internalformat","LUMINANCE","data","offset","ALPHA","LUMINANCE_ALPHA","RGB","RGB32F","RGBA","RGBA32F","buffer","size","store","pool","malloc","assign","subarray","texImage2D","TEXTURE_2D","free"],"mappings":"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","sourcesContent":["//@flow\nimport type { NDArray } from \"ndarray\";\nimport ndarray from \"ndarray\";\nimport ops from \"ndarray-ops\";\nimport pool from \"typedarray-pool\";\n\nif (typeof Buffer === \"undefined\") {\n  global.Buffer = class Buffer {\n    // mock shim so pool don't crash..\n    static isBuffer = (b) => b instanceof Buffer;\n  };\n}\n\n// code is partly taken from https://github.com/stackgl/gl-texture2d/blob/master/texture.js\n\nfunction isPacked(shape, stride) {\n  if (shape.length === 3) {\n    return (\n      stride[2] === 1 &&\n      stride[1] === shape[0] * shape[2] &&\n      stride[0] === shape[2]\n    );\n  }\n  return stride[0] === 1 && stride[1] === shape[0];\n}\n\nfunction convertFloatToUint8(out, inp) {\n  ops.muls(out, inp, 255.0);\n}\n\nexport default (\n  gl: WebGLRenderingContext,\n  texture: WebGLTexture,\n  array: NDArray,\n  floatSupported: boolean\n) => {\n  const isWebGL1 =\n    typeof WebGLRenderingContext !== \"undefined\" &&\n    gl instanceof WebGLRenderingContext;\n\n  let dtype = array.dtype;\n  let shape = array.shape.slice();\n  let maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  if (\n    shape[0] < 0 ||\n    shape[0] > maxSize ||\n    shape[1] < 0 ||\n    shape[1] > maxSize\n  ) {\n    throw new Error(\"gl-react: Invalid texture size\");\n  }\n  let packed = isPacked(shape, array.stride.slice());\n  let type = 0;\n  if (dtype === \"float32\") {\n    type = gl.FLOAT;\n  } else if (dtype === \"float64\") {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = \"float32\";\n  } else if (dtype === \"uint8\") {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = \"uint8\";\n  }\n  let format = 0;\n  let internalformat = 0;\n  if (shape.length === 2) {\n    internalformat = format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(\n      array.data,\n      shape,\n      [array.stride[0], array.stride[1], 1],\n      array.offset\n    );\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      internalformat = format = gl.ALPHA;\n      if (!isWebGL1) {\n        floatSupported = false; // eject from WebGL2 because it seems not to correctly have a internalfomat for this. need to use uint8\n      }\n    } else if (shape[2] === 2) {\n      internalformat = format = gl.LUMINANCE_ALPHA;\n      if (!isWebGL1) {\n        floatSupported = false; // eject from WebGL2 because it seems not to correctly have a internalfomat for this. need to use uint8\n      }\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n      internalformat = isWebGL1 ? gl.RGB : gl.RGB32F;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n      internalformat = isWebGL1 ? gl.RGBA : gl.RGBA32F;\n    } else {\n      throw new Error(\"gl-texture2d: Invalid shape for pixel coords\");\n    }\n  } else {\n    throw new Error(\"gl-texture2d: Invalid shape for texture\");\n  }\n  if (type === gl.FLOAT && !floatSupported) {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n  }\n  let buffer;\n  let size = array.size;\n  let store;\n  if (!packed) {\n    let stride = [shape[2], shape[2] * shape[0], 1];\n    if (\n      (dtype === \"float32\" || dtype === \"float64\") &&\n      type === gl.UNSIGNED_BYTE\n    ) {\n      store = pool.malloc(size, \"uint8\");\n      let out = ndarray(store, shape, stride, 0);\n      convertFloatToUint8(out, array);\n    } else {\n      store = pool.malloc(size, dtype);\n      let out = ndarray(store, shape, stride, 0);\n      ops.assign(out, array);\n    }\n    buffer = store.subarray(0, size);\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data;\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size);\n  }\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    internalformat,\n    shape[0],\n    shape[1],\n    0,\n    format,\n    type,\n    buffer\n  );\n  if (store) {\n    pool.free(store);\n  }\n};\n"],"file":"drawNDArrayTexture.js"}