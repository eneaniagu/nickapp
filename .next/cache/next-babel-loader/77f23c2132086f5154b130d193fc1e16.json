{"ast":null,"code":"/*\n|--------------------------------------------------------------------------\n| Auth actions.\n|--------------------------------------------------------------------------\n|\n| Here all api calls and business logic concerned with authentication are\n| handled. This (potentially among others) includes registration, login,\n| logout.\n|\n*/\nimport axios from \"axios\";\nimport * as types from \"../actionTypes\";\n/**\n * Load currently logged in user from DB.\n *\n * This usually happens after a successful login\n * or after a page refresh when there is currently\n * an active user.\n */\n\nexport const loadUser = () => {\n  return async dispatch => {\n    try {\n      await axios.get(\"/sanctum/csrf-cookie\");\n      const res = await axios.get(\"/user\"); // User was loaded successfully.\n\n      if (res.status === 200) {\n        dispatch({\n          type: types.USER_LOADED,\n          payload: res.data\n        });\n        return res.data;\n      }\n    } catch (error) {\n      console.log(error);\n\n      if (error.response.status === 422) {\n        return dispatch({\n          type: types.USER_LOADED_ERROR,\n          payload: \"Email or password are incorrect.\"\n        });\n      }\n\n      if (error.response.status === 419) {\n        return dispatch({\n          type: types.AUTHENTICATION_ERROR,\n          payload: {\n            errorMsg: \"Keinen Serverzugang.\"\n          }\n        });\n      } else {\n        return dispatch({\n          type: types.USER_LOADED_ERROR,\n          payload: \"Sorry, something went wrong.\"\n        });\n      }\n    }\n  };\n};\n/**\n * Login functionality.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The password of the user.\n */\n\nexport const login = (email, password) => {\n  return async dispatch => {\n    try {\n      // Start loading.\n      dispatch({\n        type: types.START_LOGIN_LOADING\n      }); // Make api requests.\n\n      await axios.get(\"/sanctum/csrf-cookie\");\n      const res = await axios.post(\"/login\", {\n        email,\n        password\n      }); // Authentication was successful.\n\n      if (res.status === 204) {\n        dispatch(loadUser());\n        dispatch({\n          type: types.LOGIN_SUCCESS\n        });\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 401) {\n        return dispatch({\n          type: types.LOGIN_ERROR,\n          payload: \"Email or password are incorrect.\"\n        });\n      }\n\n      if (error.response && error.response.status === 419) {\n        return dispatch({\n          type: types.LOGIN_ERROR,\n          payload: \"Application access denied.\"\n        });\n      } else {\n        return dispatch({\n          type: types.AUTHENTICATION_ERROR,\n          payload: \"Sorry, somethig went wrong.\"\n        });\n      }\n    }\n  };\n};\n/**\n * Registration functionality.\n *\n * @param {string} name\n *   The name of the user.\n * @param {string} email\n *   The email of the user.\n * @param {string} password\n *   The password of the user.\n * @param {string} password_confirmed\n *   The confirmed password of the user.\n */\n\nexport const register = (name, email, password, password_confirmed) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: types.START_REGISTER_LOADING\n      }); // API Call.\n\n      await axios.get(\"/sanctum/csrf-cookie\");\n      const res = await axios.post(\"/register\", {\n        name,\n        email,\n        password,\n        password_confirmed\n      }); // Load the user if registration was successful.\n\n      if (res.status === 204) {\n        dispatch(loadUser());\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 422) {\n        const emailErrorMsg = error.response.data.errors.email[0];\n\n        if (emailErrorMsg) {\n          dispatch({\n            type: types.REGISTER_ERROR,\n            payload: emailErrorMsg\n          });\n        }\n      } else {\n        dispatch({\n          type: types.REGISTER_ERROR,\n          payload: \"Sorry, something went wrong.\"\n        });\n      }\n    }\n  };\n};\n/**\n * Log current user out.\n */\n\nexport const logout = () => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/logout\");\n\n      if (res.status === 204) {\n        dispatch({\n          type: types.LOGOUT\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n/**\n * Request a password reset link for an account by a given email address.\n *\n * If the request is successfull, the user will get a link by email where\n * he can create a new password.\n *\n * @param {string} email\n *   The email for the account whose password will be reset.\n *\n * @return {object}\n *   Error and success message.\n */\n\nexport const forgotPassword = email => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/password/email\", {\n        email\n      }); // Behaviour on success.\n\n      if (res.status === 200) {\n        return {\n          success: res.data.message,\n          error: \"\"\n        };\n      }\n    } catch (error) {\n      // Return an error message if the email was not found in the DB.\n      if (error.response.status === 422) {\n        dispatch({\n          type: types.AUTH_GENERAL_ERROR\n        });\n        return {\n          success: \"\",\n          error: \"Seems like there is no account for that email.\"\n        };\n      }\n    }\n  };\n};\n/**\n * Create a new password for a given user.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The new password.\n * @param {string} token\n *   The token. It must have been created beforehand by declaring a forgotten password (see forgotPassword()).\n *\n * @return {object}\n */\n\nexport const resetPassword = (email, password, token) => {\n  return async dispatch => {\n    try {\n      const res = await axios.post(\"/password/reset\", {\n        email,\n        password,\n        token\n      }); // Behaviour on success.\n\n      if (res.status === 200) {\n        return {\n          success: res.data.message,\n          error: \"\"\n        };\n        /**\n         * No need to dispatch an action here as\n         * the user will be redirected, which will trigger\n         * the LOAD_USER actions anyways.\n         */\n      }\n\n      return {\n        success: \"\",\n        error: \"The given data was invalid\"\n      };\n    } catch (error) {\n      dispatch({\n        type: types.AUTH_GENERAL_ERROR\n      });\n      return {\n        success: \"\",\n        error: \"The given data is invalid.\"\n      };\n    }\n  };\n};\n/**\n * Verify the email of a user.\n *\n * @param {string} userID\n *   The id of the user.\n * @param {string} hash\n *   A hash value.\n * @param {string} expires\n *   The expiration date.\n * @param {string} signature\n *   The signature.\n *\n * @return {object}\n *   Includes success and error keys. Their values will be set depending on verification outcome.\n */\n\nexport const verifyEmail = (userID, hash, expires, signature) => {\n  return async dispatch => {\n    try {\n      /**\n       * Construct the url the api expects.\n       * It must be /email/verify/USERID/HASH?expires=EXPIRES&signature=SIGNATURE\n       */\n      const requestURL = `/email/verify/${userID}/${hash}?expires=${expires}&signature=${signature}`; // Send req to api.\n\n      const res = await axios.get(requestURL); // Success.\n\n      if (res.status === 204) {\n        return {\n          success: true,\n          error: \"\"\n        };\n      } // Error.\n      else {\n          return {\n            success: false,\n            error: \"Something went wrong\"\n          };\n        }\n    } catch (error) {\n      if (error.response && error.response.data) {\n        return {\n          success: false,\n          error: error.response.data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: \"Sorry, something went wrong.\"\n        };\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/var/www/html/blog/store/auth/authActions.tsx"],"names":["axios","types","loadUser","dispatch","get","res","status","type","USER_LOADED","payload","data","error","console","log","response","USER_LOADED_ERROR","AUTHENTICATION_ERROR","errorMsg","login","email","password","START_LOGIN_LOADING","post","LOGIN_SUCCESS","LOGIN_ERROR","register","name","password_confirmed","START_REGISTER_LOADING","emailErrorMsg","errors","REGISTER_ERROR","logout","LOGOUT","forgotPassword","success","message","AUTH_GENERAL_ERROR","resetPassword","token","verifyEmail","userID","hash","expires","signature","requestURL"],"mappings":"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","sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Auth actions.\n|--------------------------------------------------------------------------\n|\n| Here all api calls and business logic concerned with authentication are\n| handled. This (potentially among others) includes registration, login,\n| logout.\n|\n*/\n\nimport axios from \"axios\";\nimport { request } from \"http\";\nimport * as types from \"../actionTypes\";\n\n/**\n * Load currently logged in user from DB.\n *\n * This usually happens after a successful login\n * or after a page refresh when there is currently\n * an active user.\n */\nexport const loadUser = () => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            await axios.get(\"/sanctum/csrf-cookie\");\n            const res = await axios.get(\"/user\");\n            \n\n            // User was loaded successfully.\n            if (res.status === 200) {\n                dispatch({ type: types.USER_LOADED, payload: res.data });\n                return res.data;\n            }\n        } catch (error) {\n            console.log(error)\n            if (error.response.status === 422) {\n                return dispatch({\n                    type: types.USER_LOADED_ERROR,\n                    payload: \"Email or password are incorrect.\",\n                });\n            }\n            if (error.response.status === 419) {\n                return dispatch({\n                    type: types.AUTHENTICATION_ERROR,\n                    payload: {\n                        errorMsg: \"Keinen Serverzugang.\",\n                    },\n                });\n            } else {\n                return dispatch({\n                    type: types.USER_LOADED_ERROR,\n                    payload: \"Sorry, something went wrong.\",\n                });\n            }\n        }\n    };\n};\n\n/**\n * Login functionality.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The password of the user.\n */\nexport const login = (email: string, password: string): any => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            // Start loading.\n            dispatch({ type: types.START_LOGIN_LOADING });\n\n            // Make api requests.\n            await axios.get(\"/sanctum/csrf-cookie\");\n            const res = await axios.post(\"/login\", {\n                email,\n                password,\n            });\n           \n            \n            \n            // Authentication was successful.\n            if (res.status === 204) { \n                dispatch(loadUser());\n                dispatch({\n                    type: types.LOGIN_SUCCESS,\n                });\n            }\n        } catch (error: any) {\n            if (error.response && error.response.status === 401) {\n                return dispatch({\n                    type: types.LOGIN_ERROR,\n                    payload: \"Email or password are incorrect.\",\n                });\n            }\n            if (error.response && error.response.status === 419) {\n                return dispatch({\n                    type: types.LOGIN_ERROR,\n                    payload: \"Application access denied.\",\n                });\n            } else {\n                return dispatch({\n                    type: types.AUTHENTICATION_ERROR,\n                    payload: \"Sorry, somethig went wrong.\",\n                });\n            }\n        }\n    };\n};\n\n/**\n * Registration functionality.\n *\n * @param {string} name\n *   The name of the user.\n * @param {string} email\n *   The email of the user.\n * @param {string} password\n *   The password of the user.\n * @param {string} password_confirmed\n *   The confirmed password of the user.\n */\nexport const register = (\n    name: string,\n    email: string,\n    password: string,\n    password_confirmed: string\n) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            dispatch({\n                type: types.START_REGISTER_LOADING,\n            });\n            // API Call.\n            await axios.get(\"/sanctum/csrf-cookie\");\n            const res = await axios.post(\"/register\", {\n                name,\n                email,\n                password,\n                password_confirmed,\n            });\n\n            // Load the user if registration was successful.\n            if (res.status === 204) {\n                dispatch(loadUser());\n            }\n        } catch (error: any) {\n            if (error.response && error.response.status === 422) {\n                const emailErrorMsg = error.response.data.errors.email[0];\n\n                if (emailErrorMsg) {\n                    dispatch({\n                        type: types.REGISTER_ERROR,\n                        payload: emailErrorMsg,\n                    });\n                }\n            } else {\n                dispatch({\n                    type: types.REGISTER_ERROR,\n                    payload: \"Sorry, something went wrong.\",\n                });\n            }\n        }\n    };\n};\n\n/**\n * Log current user out.\n */\nexport const logout = () => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            const res = await axios.post(\"/logout\");\n            if (res.status === 204) {\n                dispatch({\n                    type: types.LOGOUT,\n                });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n};\n\n/**\n * Request a password reset link for an account by a given email address.\n *\n * If the request is successfull, the user will get a link by email where\n * he can create a new password.\n *\n * @param {string} email\n *   The email for the account whose password will be reset.\n *\n * @return {object}\n *   Error and success message.\n */\nexport const forgotPassword = (email: string) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            const res = await axios.post(\"/password/email\", { email });\n\n            // Behaviour on success.\n            if (res.status === 200) {\n                return {\n                    success: res.data.message,\n                    error: \"\",\n                };\n            }\n        } catch (error) {\n            // Return an error message if the email was not found in the DB.\n            if (error.response.status === 422) {\n                dispatch({\n                    type: types.AUTH_GENERAL_ERROR,\n                });\n                return {\n                    success: \"\",\n                    error: \"Seems like there is no account for that email.\",\n                };\n            }\n        }\n    };\n};\n\n/**\n * Create a new password for a given user.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The new password.\n * @param {string} token\n *   The token. It must have been created beforehand by declaring a forgotten password (see forgotPassword()).\n *\n * @return {object}\n */\nexport const resetPassword = (email, password, token) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            const res = await axios.post(\"/password/reset\", {\n                email,\n                password,\n                token,\n            });\n\n            // Behaviour on success.\n            if (res.status === 200) {\n                return {\n                    success: res.data.message,\n                    error: \"\",\n                };\n                /**\n                 * No need to dispatch an action here as\n                 * the user will be redirected, which will trigger\n                 * the LOAD_USER actions anyways.\n                 */\n            }\n            return {\n                success: \"\",\n                error: \"The given data was invalid\",\n            };\n        } catch (error) {\n            dispatch({\n                type: types.AUTH_GENERAL_ERROR,\n            });\n            return {\n                success: \"\",\n                error: \"The given data is invalid.\",\n            };\n        }\n    };\n};\n\n/**\n * Verify the email of a user.\n *\n * @param {string} userID\n *   The id of the user.\n * @param {string} hash\n *   A hash value.\n * @param {string} expires\n *   The expiration date.\n * @param {string} signature\n *   The signature.\n *\n * @return {object}\n *   Includes success and error keys. Their values will be set depending on verification outcome.\n */\nexport const verifyEmail = (userID, hash, expires, signature) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            /**\n             * Construct the url the api expects.\n             * It must be /email/verify/USERID/HASH?expires=EXPIRES&signature=SIGNATURE\n             */\n            const requestURL = `/email/verify/${userID}/${hash}?expires=${expires}&signature=${signature}`;\n\n            // Send req to api.\n            const res = await axios.get(requestURL);\n\n            // Success.\n            if (res.status === 204) {\n                return {\n                    success: true,\n                    error: \"\",\n                };\n            }\n            // Error.\n            else {\n                return {\n                    success: false,\n                    error: \"Something went wrong\",\n                };\n            }\n        } catch (error) {\n            if (error.response && error.response.data) {\n                return {\n                    success: false,\n                    error: error.response.data.message,\n                };\n            } else {\n                return {\n                    success: false,\n                    error: \"Sorry, something went wrong.\",\n                };\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}