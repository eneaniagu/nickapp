{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ab/Documents/laravel-nextjs-starter-main/client/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"../styles/globals.css\";\nimport store from \"@/store/store\";\nimport { Provider } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { AuthGuard } from \"@/services/Auth/AuthGuard\";\nimport { useEffect } from \"react\";\nimport * as types from \"@/store/actionTypes\";\nimport TagManager from \"react-gtm-module\";\nimport Nav from \"@/components/Navigation/Nav\";\nimport { AdvancedFooter } from \"@/components/Navigation/Footer\";\nimport { useRouter } from \"next/router\";\nimport { protectedRoutes } from \"./../config/config\";\n\nrequire(\"./../config/config.tsx\");\n\nfunction MyApp(props) {\n  // Initialize Google Tag Manager via react-gtm-module.\n  if (process.env.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID) {\n    const tagManagerArgs = {\n      gtmId: process.env.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID\n    };\n\n    if (false) {\n      TagManager.initialize(tagManagerArgs);\n    }\n  }\n\n  const router = useRouter(); // Check if we're on a protected route.\n\n  const isNoProtectedRoute = protectedRoutes.every(route => {\n    return !router.pathname.startsWith(route);\n  }); // Handle current user in redux.\n\n  useEffect(() => {\n    // Store current user if we have one.\n    if (props.user) {\n      store.dispatch({\n        type: types.USER_LOADED,\n        payload: props.user\n      });\n      return;\n    } // Dispatch user loading error if no user is present.\n\n\n    store.dispatch({\n      type: types.USER_LOADED_ERROR\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: store,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(props.Component, _objectSpread({}, props.pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), \";\", isNoProtectedRoute && /*#__PURE__*/_jsxDEV(AdvancedFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\nMyApp.propTypes = {\n  Component: PropTypes.elementType,\n  pageProps: PropTypes.object\n};\n/**\n * Fetch some data server side before rendering the page client side.\n *\n * @param {object} context\n *   The context object.\n */\n\nMyApp.getInitialProps = async ({\n  ctx\n}) => {\n  const req = ctx.req;\n  const pathname = ctx.pathname;\n  const res = ctx.res;\n  /**\n   * Abort if one var is not present.\n   * For example, the req obj will be undefined if we don't\n   * have a page reload but a page switch via the Next Router.\n   */\n\n  if (!req || !pathname || !res) {\n    return {};\n  }\n\n  const authenticator = new AuthGuard();\n  return await authenticator.authenticateUser(req, res, pathname);\n};\n\nexport default MyApp;","map":{"version":3,"sources":["/home/ab/Documents/laravel-nextjs-starter-main/client/pages/_app.tsx"],"names":["store","Provider","PropTypes","AuthGuard","useEffect","types","TagManager","Nav","AdvancedFooter","useRouter","protectedRoutes","require","MyApp","props","process","env","NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID","tagManagerArgs","gtmId","initialize","router","isNoProtectedRoute","every","route","pathname","startsWith","user","dispatch","type","USER_LOADED","payload","USER_LOADED_ERROR","pageProps","propTypes","Component","elementType","object","getInitialProps","ctx","req","res","authenticator","authenticateUser"],"mappings":";;;;;;;;;AAAA,OAAO,uBAAP;AACA,OAAOA,KAAP,MAAkB,eAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAQC,GAAR,MAAkB,6BAAlB;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,eAAT,QAAgC,oBAAhC;;AACAC,OAAO,CAAC,wBAAD,CAAP;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAA2B;AACvB;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,iCAAhB,EAAmD;AAC/C,UAAMC,cAAc,GAAG;AACnBC,MAAAA,KAAK,EAAEJ,OAAO,CAACC,GAAR,CAAYC;AADA,KAAvB;;AAGA,eAAqB;AACjBV,MAAAA,UAAU,CAACa,UAAX,CAAsBF,cAAtB;AACH;AACJ;;AAED,QAAMG,MAAM,GAAGX,SAAS,EAAxB,CAXuB,CAYvB;;AACA,QAAMY,kBAAkB,GAAGX,eAAe,CAACY,KAAhB,CAAuBC,KAAD,IAAW;AACxD,WAAO,CAACH,MAAM,CAACI,QAAP,CAAgBC,UAAhB,CAA2BF,KAA3B,CAAR;AACH,GAF0B,CAA3B,CAbuB,CAiBvB;;AACAnB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAIS,KAAK,CAACa,IAAV,EAAgB;AACZ1B,MAAAA,KAAK,CAAC2B,QAAN,CAAe;AACXC,QAAAA,IAAI,EAAEvB,KAAK,CAACwB,WADD;AAEXC,QAAAA,OAAO,EAAEjB,KAAK,CAACa;AAFJ,OAAf;AAIA;AACH,KARW,CASZ;;;AACA1B,IAAAA,KAAK,CAAC2B,QAAN,CAAe;AACXC,MAAAA,IAAI,EAAEvB,KAAK,CAAC0B;AADD,KAAf;AAGH,GAbQ,EAaN,EAbM,CAAT;AAeA,sBACI,QAAC,QAAD;AAAU,IAAA,KAAK,EAAE/B,KAAjB;AAAA,4BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD,CAAO,SAAP,oBAAqBa,KAAK,CAACmB,SAA3B;AAAA;AAAA;AAAA;AAAA,YAFJ,OAGKX,kBAAkB,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAH3B;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;AAEDT,KAAK,CAACqB,SAAN,GAAkB;AACdC,EAAAA,SAAS,EAAEhC,SAAS,CAACiC,WADP;AAEdH,EAAAA,SAAS,EAAE9B,SAAS,CAACkC;AAFP,CAAlB;AAKA;AACA;AACA;AACA;AACA;AACA;;AACAxB,KAAK,CAACyB,eAAN,GAAwB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmB;AACvC,QAAMC,GAAG,GAAGD,GAAG,CAACC,GAAhB;AACA,QAAMf,QAAQ,GAAGc,GAAG,CAACd,QAArB;AACA,QAAMgB,GAAG,GAAGF,GAAG,CAACE,GAAhB;AAEA;AACJ;AACA;AACA;AACA;;AACI,MAAI,CAACD,GAAD,IAAQ,CAACf,QAAT,IAAqB,CAACgB,GAA1B,EAA+B;AAC3B,WAAO,EAAP;AACH;;AAED,QAAMC,aAAa,GAAG,IAAItC,SAAJ,EAAtB;AACA,SAAO,MAAMsC,aAAa,CAACC,gBAAd,CAA+BH,GAA/B,EAAoCC,GAApC,EAAyChB,QAAzC,CAAb;AACH,CAhBD;;AAkBA,eAAeZ,KAAf","sourcesContent":["import \"../styles/globals.css\";\nimport store from \"@/store/store\";\nimport { Provider } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { AuthGuard } from \"@/services/Auth/AuthGuard\";\nimport { useEffect } from \"react\";\nimport * as types from \"@/store/actionTypes\";\nimport TagManager from \"react-gtm-module\";\nimport { Navbar } from \"@/components/Navigation/Navbar\";\nimport  Nav  from \"@/components/Navigation/Nav\";\nimport { AdvancedFooter } from \"@/components/Navigation/Footer\";\nimport { useRouter } from \"next/router\";\nimport { protectedRoutes } from \"./../config/config\";\nrequire(\"./../config/config.tsx\");\n\nfunction MyApp(props: any) {\n    // Initialize Google Tag Manager via react-gtm-module.\n    if (process.env.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID) {\n        const tagManagerArgs = {\n            gtmId: process.env.NEXT_PUBLIC_GOOGLE_TAG_MANAGER_ID,\n        };\n        if (process.browser) {\n            TagManager.initialize(tagManagerArgs);\n        }\n    }\n\n    const router = useRouter();\n    // Check if we're on a protected route.\n    const isNoProtectedRoute = protectedRoutes.every((route) => {\n        return !router.pathname.startsWith(route);\n    });\n\n    // Handle current user in redux.\n    useEffect(() => {\n        // Store current user if we have one.\n        if (props.user) {\n            store.dispatch({\n                type: types.USER_LOADED,\n                payload: props.user,\n            });\n            return;\n        }\n        // Dispatch user loading error if no user is present.\n        store.dispatch({\n            type: types.USER_LOADED_ERROR,\n        });\n    }, []);\n\n    return (\n        <Provider store={store}>\n            <Nav />\n            <props.Component {...props.pageProps} />;\n            {isNoProtectedRoute && <AdvancedFooter />}\n        </Provider>\n    );\n}\n\nMyApp.propTypes = {\n    Component: PropTypes.elementType,\n    pageProps: PropTypes.object,\n};\n\n/**\n * Fetch some data server side before rendering the page client side.\n *\n * @param {object} context\n *   The context object.\n */\nMyApp.getInitialProps = async ({ ctx }) => {\n    const req = ctx.req;\n    const pathname = ctx.pathname;\n    const res = ctx.res;\n\n    /**\n     * Abort if one var is not present.\n     * For example, the req obj will be undefined if we don't\n     * have a page reload but a page switch via the Next Router.\n     */\n    if (!req || !pathname || !res) {\n        return {};\n    }\n\n    const authenticator = new AuthGuard();\n    return await authenticator.authenticateUser(req, res, pathname);\n};\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}