{"ast":null,"code":"/*\n|--------------------------------------------------------------------------\n| User validation.\n|--------------------------------------------------------------------------\n|\n| Validate the input of a user upon her login or registration.\n|\n*/\nimport validator from \"validator\";\nexport class UserValidator {\n  /**\n   *\n   * @param {string} name\n   *   The name of the new user.\n   * @param {string} email\n   *   The email of the new user.\n   * @param {string} phone\n   * The name of the new user.\n   * @param {string} password\n   *   The password of the new user.\n   * @param {string} passwordConfirmed\n   *   The password confirmation.\n   * @param {number} minPassChars\n   *   The minimum number of characters the password must have.\n   *\n   * @return {boolean}\n   *   True if validation was successful.\n   */\n  validateRegistrationInput(name, email, phone, password, passwordConfirmed, minPassChars) {\n    let errorDetected = false;\n    const errors = {\n      name: \"\",\n      password: \"\",\n      phone: 0,\n      email: \"\"\n    }; // Check name.\n\n    const isNameValid = this.validateName(name);\n\n    if (!isNameValid) {\n      errors.name = \"The name may only contain letters.\";\n      errorDetected = true;\n    } // Check password.\n\n\n    const isPasswordValid = this.validatePassword(password, passwordConfirmed, minPassChars);\n\n    if (!isPasswordValid) {\n      errors.password = \"The password must be at least 8 characters long.\";\n      errorDetected = true;\n    } // Check email.\n\n\n    const isEmailValid = this.validateEmail(email);\n\n    if (!isEmailValid) {\n      errors.email = \"Please provide a valid email address.\";\n      errorDetected = true;\n    }\n\n    const isPhoneValid = this.validateEmail(phone);\n\n    if (!isPhoneValid) {\n      errors.phone = \"Please provide your mobile number.\";\n      errorDetected = true;\n    } // Return true if everythin is valid.\n\n\n    if (!errorDetected) {\n      return true;\n    }\n\n    return errors;\n  }\n  /**\n   * Check if the name of the user only contains letters.\n   *\n   * @param {string} name\n   *   The name of the user.\n   */\n\n\n  validateName(name) {\n    // Removes spaces as validator does not count them as letters.\n    const tmp = name.replace(\" \", \"\");\n    return validator.isAlpha(tmp);\n  }\n  /**\n   * Confirm the users password when registering.\n   *\n   * @param {string} password\n   *   The password.\n   * @param {string} passwordConfirmed\n   *   The password confirmation.\n   * @param {number} minPasswordLength\n   *   The minimum password length.\n   *\n   * @return {boolean}\n   *   True if validation was successful.\n   */\n\n\n  validatePassword(password, passwordConfirmed, minPasswordLength) {\n    // Check password length:\n    if (password.length < minPasswordLength) {\n      return false;\n    } // Check that password it not too soft:\n\n\n    if (password.includes(\"passwor\") || password.includes(\"123456\")) {\n      return false;\n    } // Passwords must be equal.\n\n\n    if (password !== passwordConfirmed) {\n      return false;\n    } // Return true if everything is fine.\n\n\n    return true;\n  }\n  /**\n   * Check if the user gave a valid email address.\n   *\n   * @param {string} email\n   *   The email that is validated.\n   *\n   * @return {boolean}\n   *   True if email is valid.\n   */\n\n\n  validateEmail(email) {\n    // Let the validator package handle the big lifting.\n    if (!validator.isEmail(email)) {\n      return false;\n    } // List of strings within the mail that are suspicious.\n\n\n    const blacklist = [\"@example\", \"@email\"]; // Check that none of the blacklist strings is in the mail address.\n\n    const noFraudDetected = blacklist.every(item => {\n      return !email.includes(item);\n    });\n\n    if (!noFraudDetected) {\n      return false;\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/blog/services/UserValidator.tsx"],"names":["validator","UserValidator","validateRegistrationInput","name","email","phone","password","passwordConfirmed","minPassChars","errorDetected","errors","isNameValid","validateName","isPasswordValid","validatePassword","isEmailValid","validateEmail","isPhoneValid","tmp","replace","isAlpha","minPasswordLength","length","includes","isEmail","blacklist","noFraudDetected","every","item"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,aAAN,CAAoB;AACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACWC,EAAAA,yBAAP,CACIC,IADJ,EAEIC,KAFJ,EAGIC,KAHJ,EAIIC,QAJJ,EAKIC,iBALJ,EAMIC,YANJ,EAO8E;AAC1E,QAAIC,aAAa,GAAG,KAApB;AACA,UAAMC,MAAM,GAAG;AACXP,MAAAA,IAAI,EAAE,EADK;AAEXG,MAAAA,QAAQ,EAAE,EAFC;AAGXD,MAAAA,KAAK,EAAE,CAHI;AAIXD,MAAAA,KAAK,EAAE;AAJI,KAAf,CAF0E,CAQ1E;;AACA,UAAMO,WAAW,GAAG,KAAKC,YAAL,CAAkBT,IAAlB,CAApB;;AACA,QAAI,CAACQ,WAAL,EAAkB;AACdD,MAAAA,MAAM,CAACP,IAAP,GAAc,oCAAd;AACAM,MAAAA,aAAa,GAAG,IAAhB;AACH,KAbyE,CAe1E;;;AACA,UAAMI,eAAe,GAAG,KAAKC,gBAAL,CACpBR,QADoB,EAEpBC,iBAFoB,EAGpBC,YAHoB,CAAxB;;AAKA,QAAI,CAACK,eAAL,EAAsB;AAClBH,MAAAA,MAAM,CAACJ,QAAP,GACI,kDADJ;AAEAG,MAAAA,aAAa,GAAG,IAAhB;AACH,KAzByE,CA2B1E;;;AACA,UAAMM,YAAY,GAAG,KAAKC,aAAL,CAAmBZ,KAAnB,CAArB;;AACA,QAAI,CAACW,YAAL,EAAmB;AACfL,MAAAA,MAAM,CAACN,KAAP,GAAe,uCAAf;AACAK,MAAAA,aAAa,GAAG,IAAhB;AACH;;AAED,UAAMQ,YAAY,GAAG,KAAKD,aAAL,CAAmBX,KAAnB,CAArB;;AACA,QAAI,CAACY,YAAL,EAAmB;AACfP,MAAAA,MAAM,CAACL,KAAP,GAAe,oCAAf;AACAI,MAAAA,aAAa,GAAG,IAAhB;AACH,KAtCyE,CAwC1E;;;AACA,QAAI,CAACA,aAAL,EAAoB;AAChB,aAAO,IAAP;AACH;;AACD,WAAOC,MAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACWE,EAAAA,YAAP,CAAoBT,IAApB,EAA2C;AACvC;AACA,UAAMe,GAAG,GAAGf,IAAI,CAACgB,OAAL,CAAa,GAAb,EAAkB,EAAlB,CAAZ;AACA,WAAOnB,SAAS,CAACoB,OAAV,CAAkBF,GAAlB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACWJ,EAAAA,gBAAP,CACIR,QADJ,EAEIC,iBAFJ,EAGIc,iBAHJ,EAIW;AACP;AACA,QAAIf,QAAQ,CAACgB,MAAT,GAAkBD,iBAAtB,EAAyC;AACrC,aAAO,KAAP;AACH,KAJM,CAMP;;;AACA,QAAIf,QAAQ,CAACiB,QAAT,CAAkB,SAAlB,KAAgCjB,QAAQ,CAACiB,QAAT,CAAkB,QAAlB,CAApC,EAAiE;AAC7D,aAAO,KAAP;AACH,KATM,CAWP;;;AACA,QAAIjB,QAAQ,KAAKC,iBAAjB,EAAoC;AAChC,aAAO,KAAP;AACH,KAdM,CAgBP;;;AACA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACWS,EAAAA,aAAP,CAAqBZ,KAArB,EAA6C;AACzC;AACA,QAAI,CAACJ,SAAS,CAACwB,OAAV,CAAkBpB,KAAlB,CAAL,EAA+B;AAC3B,aAAO,KAAP;AACH,KAJwC,CAMzC;;;AACA,UAAMqB,SAAS,GAAG,CAAC,UAAD,EAAa,QAAb,CAAlB,CAPyC,CASzC;;AACA,UAAMC,eAAe,GAAGD,SAAS,CAACE,KAAV,CAAiBC,IAAD,IAAU;AAC9C,aAAO,CAACxB,KAAK,CAACmB,QAAN,CAAeK,IAAf,CAAR;AACH,KAFuB,CAAxB;;AAIA,QAAI,CAACF,eAAL,EAAsB;AAClB,aAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH;;AAtJsB","sourcesContent":["/*\n|--------------------------------------------------------------------------\n| User validation.\n|--------------------------------------------------------------------------\n|\n| Validate the input of a user upon her login or registration.\n|\n*/\nimport { number } from \"prop-types\";\nimport validator from \"validator\";\n\nexport class UserValidator {\n    /**\n     *\n     * @param {string} name\n     *   The name of the new user.\n     * @param {string} email\n     *   The email of the new user.\n     * @param {string} phone\n     * The name of the new user.\n     * @param {string} password\n     *   The password of the new user.\n     * @param {string} passwordConfirmed\n     *   The password confirmation.\n     * @param {number} minPassChars\n     *   The minimum number of characters the password must have.\n     *\n     * @return {boolean}\n     *   True if validation was successful.\n     */\n    public validateRegistrationInput(\n        name: string,\n        email: string,\n        phone: number,\n        password: string,\n        passwordConfirmed: string,\n        minPassChars: number\n    ): { name: string; email: string; phone: number, password: string } | boolean {\n        let errorDetected = false;\n        const errors = {\n            name: \"\",\n            password: \"\",\n            phone: 0,\n            email: \"\",\n        };\n        // Check name.\n        const isNameValid = this.validateName(name);\n        if (!isNameValid) {\n            errors.name = \"The name may only contain letters.\";\n            errorDetected = true;\n        }\n\n        // Check password.\n        const isPasswordValid = this.validatePassword(\n            password,\n            passwordConfirmed,\n            minPassChars\n        );\n        if (!isPasswordValid) {\n            errors.password =\n                \"The password must be at least 8 characters long.\";\n            errorDetected = true;\n        }\n\n        // Check email.\n        const isEmailValid = this.validateEmail(email);\n        if (!isEmailValid) {\n            errors.email = \"Please provide a valid email address.\";\n            errorDetected = true;\n        }\n\n        const isPhoneValid = this.validateEmail(phone);\n        if (!isPhoneValid) {\n            errors.phone = \"Please provide your mobile number.\";\n            errorDetected = true;\n        }\n\n        // Return true if everythin is valid.\n        if (!errorDetected) {\n            return true;\n        }\n        return errors;\n    }\n\n    /**\n     * Check if the name of the user only contains letters.\n     *\n     * @param {string} name\n     *   The name of the user.\n     */\n    public validateName(name: string): boolean {\n        // Removes spaces as validator does not count them as letters.\n        const tmp = name.replace(\" \", \"\");\n        return validator.isAlpha(tmp);\n    }\n\n    /**\n     * Confirm the users password when registering.\n     *\n     * @param {string} password\n     *   The password.\n     * @param {string} passwordConfirmed\n     *   The password confirmation.\n     * @param {number} minPasswordLength\n     *   The minimum password length.\n     *\n     * @return {boolean}\n     *   True if validation was successful.\n     */\n    public validatePassword(\n        password: string,\n        passwordConfirmed: string,\n        minPasswordLength: number\n    ): boolean {\n        // Check password length:\n        if (password.length < minPasswordLength) {\n            return false;\n        }\n\n        // Check that password it not too soft:\n        if (password.includes(\"passwor\") || password.includes(\"123456\")) {\n            return false;\n        }\n\n        // Passwords must be equal.\n        if (password !== passwordConfirmed) {\n            return false;\n        }\n\n        // Return true if everything is fine.\n        return true;\n    }\n\n    /**\n     * Check if the user gave a valid email address.\n     *\n     * @param {string} email\n     *   The email that is validated.\n     *\n     * @return {boolean}\n     *   True if email is valid.\n     */\n    public validateEmail(email: string): boolean {\n        // Let the validator package handle the big lifting.\n        if (!validator.isEmail(email)) {\n            return false;\n        }\n\n        // List of strings within the mail that are suspicious.\n        const blacklist = [\"@example\", \"@email\"];\n\n        // Check that none of the blacklist strings is in the mail address.\n        const noFraudDetected = blacklist.every((item) => {\n            return !email.includes(item);\n        });\n\n        if (!noFraudDetected) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}