{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n|--------------------------------------------------------------------------\n| Auth actions.\n|--------------------------------------------------------------------------\n|\n| Here all api calls and business logic concerned with authentication are\n| handled. This (potentially among others) includes registration, login,\n| logout.\n|\n*/\nimport axios from \"axios\";\nimport * as types from \"../actionTypes\";\n/**\n * Load currently logged in user from DB.\n *\n * This usually happens after a successful login\n * or after a page refresh when there is currently\n * an active user.\n */\n\nexport var loadUser = function loadUser() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"/sanctum/csrf-cookie\");\n\n            case 3:\n              _context.next = 5;\n              return axios.get(\"/api/user\");\n\n            case 5:\n              res = _context.sent;\n\n              if (!(res.status === 200)) {\n                _context.next = 9;\n                break;\n              }\n\n              dispatch({\n                type: types.USER_LOADED,\n                payload: res.data\n              });\n              return _context.abrupt(\"return\", res.data);\n\n            case 9:\n              _context.next = 20;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!(_context.t0.response.status === 422)) {\n                _context.next = 15;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch({\n                type: types.USER_LOADED_ERROR,\n                payload: \"Email or password are incorrect.\"\n              }));\n\n            case 15:\n              if (!(_context.t0.response.status === 419)) {\n                _context.next = 19;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch({\n                type: types.AUTHENTICATION_ERROR,\n                payload: {\n                  errorMsg: \"Keinen Serverzugang.\"\n                }\n              }));\n\n            case 19:\n              return _context.abrupt(\"return\", dispatch({\n                type: types.USER_LOADED_ERROR,\n                payload: \"Sorry, something went wrong.\"\n              }));\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n/**\n * Login functionality.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The password of the user.\n */\n\nexport var login = function login(email, password) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              // Start loading.\n              dispatch({\n                type: types.START_LOGIN_LOADING\n              }); // Make api requests.\n\n              _context2.next = 4;\n              return axios.get(\"/sanctum/csrf-cookie\");\n\n            case 4:\n              _context2.next = 6;\n              return axios.post(\"/login\", {\n                email: email,\n                password: password\n              });\n\n            case 6:\n              res = _context2.sent;\n              console.log(res.status); // Authentication was successful.\n\n              if (res.status === 204) {\n                console.log(res);\n                dispatch(loadUser());\n                dispatch({\n                  type: types.LOGIN_SUCCESS\n                });\n              }\n\n              _context2.next = 20;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n\n              if (!(_context2.t0.response && _context2.t0.response.status === 422)) {\n                _context2.next = 15;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", dispatch({\n                type: types.LOGIN_ERROR,\n                payload: \"Email or password are incorrect.\"\n              }));\n\n            case 15:\n              if (!(_context2.t0.response && _context2.t0.response.status === 419)) {\n                _context2.next = 19;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", dispatch({\n                type: types.LOGIN_ERROR,\n                payload: \"Application access denied.\"\n              }));\n\n            case 19:\n              return _context2.abrupt(\"return\", dispatch({\n                type: types.AUTHENTICATION_ERROR,\n                payload: \"Sorry, somethig went wrong.\"\n              }));\n\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n/**\n * Registration functionality.\n *\n * @param {string} name\n *   The name of the user.\n * @param {string} email\n *   The email of the user.\n * @param {string} password\n *   The password of the user.\n * @param {string} password_confirmed\n *   The confirmed password of the user.\n */\n\nexport var register = function register(name, email, password, password_confirmed) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var res, emailErrorMsg;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              dispatch({\n                type: types.START_REGISTER_LOADING\n              }); // API Call.\n\n              _context3.next = 4;\n              return axios.get(\"/sanctum/csrf-cookie\");\n\n            case 4:\n              _context3.next = 6;\n              return axios.post(\"/register\", {\n                name: name,\n                email: email,\n                password: password,\n                password_confirmed: password_confirmed\n              });\n\n            case 6:\n              res = _context3.sent;\n\n              // Load the user if registration was successful.\n              if (res.status === 201) {\n                dispatch(loadUser());\n              }\n\n              _context3.next = 13;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](0);\n\n              if (_context3.t0.response && _context3.t0.response.status === 422) {\n                emailErrorMsg = _context3.t0.response.data.errors.email[0];\n\n                if (emailErrorMsg) {\n                  dispatch({\n                    type: types.REGISTER_ERROR,\n                    payload: emailErrorMsg\n                  });\n                }\n              } else {\n                dispatch({\n                  type: types.REGISTER_ERROR,\n                  payload: \"Sorry, something went wrong.\"\n                });\n              }\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 10]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\n/**\n * Log current user out.\n */\n\nexport var logout = function logout() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return axios.post(\"/logout\");\n\n            case 3:\n              res = _context4.sent;\n\n              if (res.status === 204) {\n                dispatch({\n                  type: types.LOGOUT\n                });\n              }\n\n              _context4.next = 10;\n              break;\n\n            case 7:\n              _context4.prev = 7;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.log(_context4.t0);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 7]]);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\n/**\n * Request a password reset link for an account by a given email address.\n *\n * If the request is successfull, the user will get a link by email where\n * he can create a new password.\n *\n * @param {string} email\n *   The email for the account whose password will be reset.\n *\n * @return {object}\n *   Error and success message.\n */\n\nexport var forgotPassword = function forgotPassword(email) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return axios.post(\"/password/email\", {\n                email: email\n              });\n\n            case 3:\n              res = _context5.sent;\n\n              if (!(res.status === 200)) {\n                _context5.next = 6;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                success: res.data.message,\n                error: \"\"\n              });\n\n            case 6:\n              _context5.next = 13;\n              break;\n\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](0);\n\n              if (!(_context5.t0.response.status === 422)) {\n                _context5.next = 13;\n                break;\n              }\n\n              dispatch({\n                type: types.AUTH_GENERAL_ERROR\n              });\n              return _context5.abrupt(\"return\", {\n                success: \"\",\n                error: \"Seems like there is no account for that email.\"\n              });\n\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[0, 8]]);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\n/**\n * Create a new password for a given user.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The new password.\n * @param {string} token\n *   The token. It must have been created beforehand by declaring a forgotten password (see forgotPassword()).\n *\n * @return {object}\n */\n\nexport var resetPassword = function resetPassword(email, password, token) {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return axios.post(\"/password/reset\", {\n                email: email,\n                password: password,\n                token: token\n              });\n\n            case 3:\n              res = _context6.sent;\n\n              if (!(res.status === 200)) {\n                _context6.next = 6;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", {\n                success: res.data.message,\n                error: \"\"\n              });\n\n            case 6:\n              return _context6.abrupt(\"return\", {\n                success: \"\",\n                error: \"The given data was invalid\"\n              });\n\n            case 9:\n              _context6.prev = 9;\n              _context6.t0 = _context6[\"catch\"](0);\n              dispatch({\n                type: types.AUTH_GENERAL_ERROR\n              });\n              return _context6.abrupt(\"return\", {\n                success: \"\",\n                error: \"The given data is invalid.\"\n              });\n\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 9]]);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\n/**\n * Verify the email of a user.\n *\n * @param {string} userID\n *   The id of the user.\n * @param {string} hash\n *   A hash value.\n * @param {string} expires\n *   The expiration date.\n * @param {string} signature\n *   The signature.\n *\n * @return {object}\n *   Includes success and error keys. Their values will be set depending on verification outcome.\n */\n\nexport var verifyEmail = function verifyEmail(userID, hash, expires, signature) {\n  return /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch) {\n      var requestURL, res;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n\n              /**\n               * Construct the url the api expects.\n               * It must be /email/verify/USERID/HASH?expires=EXPIRES&signature=SIGNATURE\n               */\n              requestURL = \"/email/verify/\".concat(userID, \"/\").concat(hash, \"?expires=\").concat(expires, \"&signature=\").concat(signature); // Send req to api.\n\n              _context7.next = 4;\n              return axios.get(requestURL);\n\n            case 4:\n              res = _context7.sent;\n\n              if (!(res.status === 204)) {\n                _context7.next = 9;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", {\n                success: true,\n                error: \"\"\n              });\n\n            case 9:\n              return _context7.abrupt(\"return\", {\n                success: false,\n                error: \"Something went wrong\"\n              });\n\n            case 10:\n              _context7.next = 19;\n              break;\n\n            case 12:\n              _context7.prev = 12;\n              _context7.t0 = _context7[\"catch\"](0);\n\n              if (!(_context7.t0.response && _context7.t0.response.data)) {\n                _context7.next = 18;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", {\n                success: false,\n                error: _context7.t0.response.data.message\n              });\n\n            case 18:\n              return _context7.abrupt(\"return\", {\n                success: false,\n                error: \"Sorry, something went wrong.\"\n              });\n\n            case 19:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[0, 12]]);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/var/www/html/SourceApi/shoppingApi/client/store/auth/authActions.tsx"],"names":["axios","types","loadUser","dispatch","get","res","status","type","USER_LOADED","payload","data","response","USER_LOADED_ERROR","AUTHENTICATION_ERROR","errorMsg","login","email","password","START_LOGIN_LOADING","post","console","log","LOGIN_SUCCESS","LOGIN_ERROR","register","name","password_confirmed","START_REGISTER_LOADING","emailErrorMsg","errors","REGISTER_ERROR","logout","LOGOUT","forgotPassword","success","message","error","AUTH_GENERAL_ERROR","resetPassword","token","verifyEmail","userID","hash","expires","signature","requestURL"],"mappings":"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","sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Auth actions.\n|--------------------------------------------------------------------------\n|\n| Here all api calls and business logic concerned with authentication are\n| handled. This (potentially among others) includes registration, login,\n| logout.\n|\n*/\n\nimport axios from \"axios\";\nimport { request } from \"http\";\nimport * as types from \"../actionTypes\";\n\n/**\n * Load currently logged in user from DB.\n *\n * This usually happens after a successful login\n * or after a page refresh when there is currently\n * an active user.\n */\nexport const loadUser = () => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            await axios.get(\"/sanctum/csrf-cookie\");\n            const res = await axios.get(\"/api/user\");\n\n            // User was loaded successfully.\n            if (res.status === 200) {\n                dispatch({ type: types.USER_LOADED, payload: res.data });\n                return res.data;\n            }\n        } catch (error) {\n            if (error.response.status === 422) {\n                return dispatch({\n                    type: types.USER_LOADED_ERROR,\n                    payload: \"Email or password are incorrect.\",\n                });\n            }\n            if (error.response.status === 419) {\n                return dispatch({\n                    type: types.AUTHENTICATION_ERROR,\n                    payload: {\n                        errorMsg: \"Keinen Serverzugang.\",\n                    },\n                });\n            } else {\n                return dispatch({\n                    type: types.USER_LOADED_ERROR,\n                    payload: \"Sorry, something went wrong.\",\n                });\n            }\n        }\n    };\n};\n\n/**\n * Login functionality.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The password of the user.\n */\nexport const login = (email: string, password: string): any => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            // Start loading.\n            dispatch({ type: types.START_LOGIN_LOADING });\n\n            // Make api requests.\n            await axios.get(\"/sanctum/csrf-cookie\");\n            const res = await axios.post(\"/login\", {\n                email,\n                password,\n            });\n\n               \n            console.log(res.status) \n            // Authentication was successful.\n            if (res.status === 204) {\n                console.log(res) \n                dispatch(loadUser());\n                dispatch({\n                    type: types.LOGIN_SUCCESS,\n                });\n            }\n        } catch (error: any) {\n            if (error.response && error.response.status === 422) {\n                return dispatch({\n                    type: types.LOGIN_ERROR,\n                    payload: \"Email or password are incorrect.\",\n                });\n            }\n            if (error.response && error.response.status === 419) {\n                return dispatch({\n                    type: types.LOGIN_ERROR,\n                    payload: \"Application access denied.\",\n                });\n            } else {\n                return dispatch({\n                    type: types.AUTHENTICATION_ERROR,\n                    payload: \"Sorry, somethig went wrong.\",\n                });\n            }\n        }\n    };\n};\n\n/**\n * Registration functionality.\n *\n * @param {string} name\n *   The name of the user.\n * @param {string} email\n *   The email of the user.\n * @param {string} password\n *   The password of the user.\n * @param {string} password_confirmed\n *   The confirmed password of the user.\n */\nexport const register = (\n    name: string,\n    email: string,\n    password: string,\n    password_confirmed: string\n) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            dispatch({\n                type: types.START_REGISTER_LOADING,\n            });\n            // API Call.\n            await axios.get(\"/sanctum/csrf-cookie\");\n            const res = await axios.post(\"/register\", {\n                name,\n                email,\n                password,\n                password_confirmed,\n            });\n\n            // Load the user if registration was successful.\n            if (res.status === 201) {\n                dispatch(loadUser());\n            }\n        } catch (error: any) {\n            if (error.response && error.response.status === 422) {\n                const emailErrorMsg = error.response.data.errors.email[0];\n\n                if (emailErrorMsg) {\n                    dispatch({\n                        type: types.REGISTER_ERROR,\n                        payload: emailErrorMsg,\n                    });\n                }\n            } else {\n                dispatch({\n                    type: types.REGISTER_ERROR,\n                    payload: \"Sorry, something went wrong.\",\n                });\n            }\n        }\n    };\n};\n\n/**\n * Log current user out.\n */\nexport const logout = () => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            const res = await axios.post(\"/logout\");\n            if (res.status === 204) {\n                dispatch({\n                    type: types.LOGOUT,\n                });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n};\n\n/**\n * Request a password reset link for an account by a given email address.\n *\n * If the request is successfull, the user will get a link by email where\n * he can create a new password.\n *\n * @param {string} email\n *   The email for the account whose password will be reset.\n *\n * @return {object}\n *   Error and success message.\n */\nexport const forgotPassword = (email: string) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            const res = await axios.post(\"/password/email\", { email });\n\n            // Behaviour on success.\n            if (res.status === 200) {\n                return {\n                    success: res.data.message,\n                    error: \"\",\n                };\n            }\n        } catch (error) {\n            // Return an error message if the email was not found in the DB.\n            if (error.response.status === 422) {\n                dispatch({\n                    type: types.AUTH_GENERAL_ERROR,\n                });\n                return {\n                    success: \"\",\n                    error: \"Seems like there is no account for that email.\",\n                };\n            }\n        }\n    };\n};\n\n/**\n * Create a new password for a given user.\n *\n * @param {string} email\n *   The email address of the user.\n * @param {string} password\n *   The new password.\n * @param {string} token\n *   The token. It must have been created beforehand by declaring a forgotten password (see forgotPassword()).\n *\n * @return {object}\n */\nexport const resetPassword = (email, password, token) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            const res = await axios.post(\"/password/reset\", {\n                email,\n                password,\n                token,\n            });\n\n            // Behaviour on success.\n            if (res.status === 200) {\n                return {\n                    success: res.data.message,\n                    error: \"\",\n                };\n                /**\n                 * No need to dispatch an action here as\n                 * the user will be redirected, which will trigger\n                 * the LOAD_USER actions anyways.\n                 */\n            }\n            return {\n                success: \"\",\n                error: \"The given data was invalid\",\n            };\n        } catch (error) {\n            dispatch({\n                type: types.AUTH_GENERAL_ERROR,\n            });\n            return {\n                success: \"\",\n                error: \"The given data is invalid.\",\n            };\n        }\n    };\n};\n\n/**\n * Verify the email of a user.\n *\n * @param {string} userID\n *   The id of the user.\n * @param {string} hash\n *   A hash value.\n * @param {string} expires\n *   The expiration date.\n * @param {string} signature\n *   The signature.\n *\n * @return {object}\n *   Includes success and error keys. Their values will be set depending on verification outcome.\n */\nexport const verifyEmail = (userID, hash, expires, signature) => {\n    return async (dispatch: CallableFunction) => {\n        try {\n            /**\n             * Construct the url the api expects.\n             * It must be /email/verify/USERID/HASH?expires=EXPIRES&signature=SIGNATURE\n             */\n            const requestURL = `/email/verify/${userID}/${hash}?expires=${expires}&signature=${signature}`;\n\n            // Send req to api.\n            const res = await axios.get(requestURL);\n\n            // Success.\n            if (res.status === 204) {\n                return {\n                    success: true,\n                    error: \"\",\n                };\n            }\n            // Error.\n            else {\n                return {\n                    success: false,\n                    error: \"Something went wrong\",\n                };\n            }\n        } catch (error) {\n            if (error.response && error.response.data) {\n                return {\n                    success: false,\n                    error: error.response.data.message,\n                };\n            } else {\n                return {\n                    success: false,\n                    error: \"Sorry, something went wrong.\",\n                };\n            }\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}