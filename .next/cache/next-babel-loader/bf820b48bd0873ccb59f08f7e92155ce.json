{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { request } from 'http';\nimport * as type from '../actionTypes';\nexport var addproduct = function addproduct(Items) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var _iterator, _step, par, res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch({\n                type: type.ADD_PRODUCT\n              }); // Api call\n\n              _iterator = _createForOfIteratorHelper(Items.entries());\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  par = _step.value;\n                  console.log(pas);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              _context.next = 6;\n              return axios.get(\"/sanctum/csrf-cookie\");\n\n            case 6:\n              _context.next = 8;\n              return axios.post('/addproduct', {\n                Items: Items\n              });\n\n            case 8:\n              res = _context.sent;\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (_context.t0) {\n                console.log(_context.t0);\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/ab/Documents/laravel-nextjs-starter-main/client/store/Tanent/action.js"],"names":["axios","request","type","addproduct","Items","dispatch","ADD_PRODUCT","entries","par","console","log","pas","get","post","res"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAO,KAAKC,IAAZ,MAAwB,gBAAxB;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAU;AAChC;AAAA,wEAAO,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAECA,cAAAA,QAAQ,CAAC;AACLH,gBAAAA,IAAI,EAAEA,IAAI,CAACI;AADN,eAAD,CAAR,CAFD,CAKC;;AALD,qDAMgBF,KAAK,CAACG,OAAN,EANhB;;AAAA;AAMC,oEAA+B;AAAvBC,kBAAAA,GAAuB;AAC3BC,kBAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACH;AARF;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAUQX,KAAK,CAACY,GAAN,CAAU,sBAAV,CAVR;;AAAA;AAAA;AAAA,qBAWmBZ,KAAK,CAACa,IAAN,CAAW,aAAX,EAAyB;AAACT,gBAAAA,KAAK,EAALA;AAAD,eAAzB,CAXnB;;AAAA;AAWOU,cAAAA,GAXP;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAaC,+BAAS;AACLL,gBAAAA,OAAO,CAACC,GAAR;AACH;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAqBH,CAtBM","sourcesContent":["import axios from 'axios'\nimport { request } from 'http'\nimport * as type  from  '../actionTypes'\n\n\nexport const addproduct = (Items) =>{\n    return async (dispatch) => {\n        try{\n            dispatch({\n                type: type.ADD_PRODUCT\n            })\n            // Api call\n            for(let par of Items.entries()){\n                console.log(pas)\n            }\n            \n             await axios.get(\"/sanctum/csrf-cookie\")\n            const res = await axios.post('/addproduct',{Items})\n        } catch(error){\n            if(error){\n                console.log(error)\n            }\n\n        }\n\n    }   \n    \n}"]},"metadata":{},"sourceType":"module"}