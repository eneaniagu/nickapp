{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\n/*\n|--------------------------------------------------------------------------\n| User validation.\n|--------------------------------------------------------------------------\n|\n| Validate the input of a user upon her login or registration.\n|\n*/\nimport validator from \"validator\";\nexport var UserValidator = /*#__PURE__*/function () {\n  function UserValidator() {\n    _classCallCheck(this, UserValidator);\n  }\n\n  _createClass(UserValidator, [{\n    key: \"validateRegistrationInput\",\n\n    /**\n     *\n     * @param {string} name\n     *   The name of the new user.\n     * @param {string} email\n     *   The email of the new user.\n     * @param {string} password\n     *   The password of the new user.\n     * @param {string} passwordConfirmed\n     *   The password confirmation.\n     * @param {number} minPassChars\n     *   The minimum number of characters the password must have.\n     *\n     * @return {boolean}\n     *   True if validation was successful.\n     */\n    value: function validateRegistrationInput(name, email, password, passwordConfirmed, minPassChars) {\n      var errorDetected = false;\n      var errors = {\n        name: \"\",\n        password: \"\",\n        email: \"\"\n      }; // Check name.\n\n      var isNameValid = this.validateName(name);\n\n      if (!isNameValid) {\n        errors.name = \"The name may only contain letters.\";\n        errorDetected = true;\n      } // Check password.\n\n\n      var isPasswordValid = this.validatePassword(password, passwordConfirmed, minPassChars);\n\n      if (!isPasswordValid) {\n        errors.password = \"The password must be at least 8 characters long.\";\n        errorDetected = true;\n      } // Check email.\n\n\n      var isEmailValid = this.validateEmail(email);\n\n      if (!isEmailValid) {\n        errors.email = \"Please provide a valid email address.\";\n        errorDetected = true;\n      } // Return true if everythin is valid.\n\n\n      if (!errorDetected) {\n        return true;\n      }\n\n      return errors;\n    }\n    /**\n     * Check if the name of the user only contains letters.\n     *\n     * @param {string} name\n     *   The name of the user.\n     */\n\n  }, {\n    key: \"validateName\",\n    value: function validateName(name) {\n      // Removes spaces as validator does not count them as letters.\n      var tmp = name.replace(\" \", \"\");\n      return validator.isAlpha(tmp);\n    }\n    /**\n     * Confirm the users password when registering.\n     *\n     * @param {string} password\n     *   The password.\n     * @param {string} passwordConfirmed\n     *   The password confirmation.\n     * @param {number} minPasswordLength\n     *   The minimum password length.\n     *\n     * @return {boolean}\n     *   True if validation was successful.\n     */\n\n  }, {\n    key: \"validatePassword\",\n    value: function validatePassword(password, passwordConfirmed, minPasswordLength) {\n      // Check password length:\n      if (password.length < minPasswordLength) {\n        return false;\n      } // Check that password it not too soft:\n\n\n      if (password.includes(\"passwor\") || password.includes(\"123456\")) {\n        return false;\n      } // Passwords must be equal.\n\n\n      if (password !== passwordConfirmed) {\n        return false;\n      } // Return true if everything is fine.\n\n\n      return true;\n    }\n    /**\n     * Check if the user gave a valid email address.\n     *\n     * @param {string} email\n     *   The email that is validated.\n     *\n     * @return {boolean}\n     *   True if email is valid.\n     */\n\n  }, {\n    key: \"validateEmail\",\n    value: function validateEmail(email) {\n      // Let the validator package handle the big lifting.\n      if (!validator.isEmail(email)) {\n        return false;\n      } // List of strings within the mail that are suspicious.\n\n\n      var blacklist = [\"@example\", \"@email\"]; // Check that none of the blacklist strings is in the mail address.\n\n      var noFraudDetected = blacklist.every(function (item) {\n        return !email.includes(item);\n      });\n\n      if (!noFraudDetected) {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return UserValidator;\n}();","map":{"version":3,"sources":["/home/ab/Documents/laravel-nextjs-starter-main/client/services/UserValidator.tsx"],"names":["validator","UserValidator","name","email","password","passwordConfirmed","minPassChars","errorDetected","errors","isNameValid","validateName","isPasswordValid","validatePassword","isEmailValid","validateEmail","tmp","replace","isAlpha","minPasswordLength","length","includes","isEmail","blacklist","noFraudDetected","every","item"],"mappings":"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","sourcesContent":["/*\n|--------------------------------------------------------------------------\n| User validation.\n|--------------------------------------------------------------------------\n|\n| Validate the input of a user upon her login or registration.\n|\n*/\nimport validator from \"validator\";\n\nexport class UserValidator {\n    /**\n     *\n     * @param {string} name\n     *   The name of the new user.\n     * @param {string} email\n     *   The email of the new user.\n     * @param {string} password\n     *   The password of the new user.\n     * @param {string} passwordConfirmed\n     *   The password confirmation.\n     * @param {number} minPassChars\n     *   The minimum number of characters the password must have.\n     *\n     * @return {boolean}\n     *   True if validation was successful.\n     */\n    public validateRegistrationInput(\n        name: string,\n        email: string,\n        password: string,\n        passwordConfirmed: string,\n        minPassChars: number\n    ): { name: string; email: string; password: string } | boolean {\n        let errorDetected = false;\n        const errors = {\n            name: \"\",\n            password: \"\",\n            email: \"\",\n        };\n        // Check name.\n        const isNameValid = this.validateName(name);\n        if (!isNameValid) {\n            errors.name = \"The name may only contain letters.\";\n            errorDetected = true;\n        }\n\n        // Check password.\n        const isPasswordValid = this.validatePassword(\n            password,\n            passwordConfirmed,\n            minPassChars\n        );\n        if (!isPasswordValid) {\n            errors.password =\n                \"The password must be at least 8 characters long.\";\n            errorDetected = true;\n        }\n\n        // Check email.\n        const isEmailValid = this.validateEmail(email);\n        if (!isEmailValid) {\n            errors.email = \"Please provide a valid email address.\";\n            errorDetected = true;\n        }\n\n        // Return true if everythin is valid.\n        if (!errorDetected) {\n            return true;\n        }\n        return errors;\n    }\n\n    /**\n     * Check if the name of the user only contains letters.\n     *\n     * @param {string} name\n     *   The name of the user.\n     */\n    public validateName(name: string): boolean {\n        // Removes spaces as validator does not count them as letters.\n        const tmp = name.replace(\" \", \"\");\n        return validator.isAlpha(tmp);\n    }\n\n    /**\n     * Confirm the users password when registering.\n     *\n     * @param {string} password\n     *   The password.\n     * @param {string} passwordConfirmed\n     *   The password confirmation.\n     * @param {number} minPasswordLength\n     *   The minimum password length.\n     *\n     * @return {boolean}\n     *   True if validation was successful.\n     */\n    public validatePassword(\n        password: string,\n        passwordConfirmed: string,\n        minPasswordLength: number\n    ): boolean {\n        // Check password length:\n        if (password.length < minPasswordLength) {\n            return false;\n        }\n\n        // Check that password it not too soft:\n        if (password.includes(\"passwor\") || password.includes(\"123456\")) {\n            return false;\n        }\n\n        // Passwords must be equal.\n        if (password !== passwordConfirmed) {\n            return false;\n        }\n\n        // Return true if everything is fine.\n        return true;\n    }\n\n    /**\n     * Check if the user gave a valid email address.\n     *\n     * @param {string} email\n     *   The email that is validated.\n     *\n     * @return {boolean}\n     *   True if email is valid.\n     */\n    public validateEmail(email: string): boolean {\n        // Let the validator package handle the big lifting.\n        if (!validator.isEmail(email)) {\n            return false;\n        }\n\n        // List of strings within the mail that are suspicious.\n        const blacklist = [\"@example\", \"@email\"];\n\n        // Check that none of the blacklist strings is in the mail address.\n        const noFraudDetected = blacklist.every((item) => {\n            return !email.includes(item);\n        });\n\n        if (!noFraudDetected) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}