{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ab/Documents/laravel-nextjs-starter-main/client/pages/user/password/reset/[token].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { Card } from \"@/components/Card/Card\";\nimport { PrimaryButton } from \"@/components/Button/Button\";\nimport { TextInput } from \"@/components/Form/FormElement\";\nimport { H1 } from \"@/components/Typography/Headers\";\nimport React, { useState } from \"react\";\nimport { UserValidator } from \"@/services/UserValidator\";\nimport { connect } from \"react-redux\";\nimport { resetPassword } from \"@/store/auth/authActions\";\nimport { Alert } from \"@/components/Alert/Alert\";\n\nfunction ResetPassword(props) {\n  const router = useRouter();\n  const {\n    token\n  } = router.query;\n  const {\n    0: formData,\n    1: setFormData\n  } = useState({\n    email: \"\",\n    emailError: \"\",\n    password: \"\",\n    passwordError: \"\",\n    password_confirmed: \"\",\n    password_confirmedError: \"\",\n    error: \"\"\n  });\n  /**\n   * Handle input change.\n   *\n   * @param {object} e\n   *   The event object.\n   */\n\n  const handleInputChange = e => {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n      [e.currentTarget.name]: e.currentTarget.value,\n      emailError: \"\",\n      passwordError: \"\"\n    }));\n  };\n  /**\n   * Validate the form data and send it to the api by dispatching a redux action.\n   */\n\n\n  const submit = async () => {\n    const validator = new UserValidator(); // Check if email is valid.\n\n    const isEmailValid = validator.validateEmail(formData.email);\n\n    if (!isEmailValid) {\n      setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        emailError: \"Please enter a valid email address.\"\n      }));\n      return;\n    } // Check if passwords are valid and equal.\n\n\n    const arePasswordsValid = validator.validatePassword(formData.password, formData.password_confirmed, 8);\n\n    if (!arePasswordsValid) {\n      setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        emailError: \"Please enter a valid password and make sure you confirm it correctly.\"\n      }));\n      return;\n    } // Make API request via redux.\n\n\n    const res = await props.resetPassword(formData.email, formData.password, token); // Redirect to home route on successful password reset.\n\n    if (res.success) {\n      router.push(process.env.NEXT_PUBLIC_USER_HOME_ROUTE);\n    } // Display danger notification if something went wrong.\n\n\n    if (res.error) {\n      setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        error: res.error\n      }));\n    }\n  }; // Return statement.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen relative\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute w-full md:w-3/5 lg:w-1/3 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        additionalInnerClasses: \"justify-center items-center\",\n        additionalWrapperClasses: \"bg-gray-100\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [formData.error && /*#__PURE__*/_jsxDEV(Alert, {\n            type: \"danger\",\n            children: formData.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(H1, {\n            withMargin: true,\n            center: true,\n            children: \"Reset your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"You now have the possibility to reset your password. Firstly, please confirm your email address and then create a new password.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"text\",\n            value: formData.email,\n            placeholder: \"Your email address...\",\n            onChange: e => {\n              handleInputChange(e);\n            },\n            name: \"email\",\n            errorMsg: formData.emailError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"password\",\n            value: formData.password,\n            placeholder: \"Your new password...\",\n            onChange: e => {\n              handleInputChange(e);\n            },\n            name: \"password\",\n            errorMsg: formData.passwordError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"password\",\n            value: formData.password_confirmed,\n            placeholder: \"Confirm your new password\",\n            onChange: e => {\n              handleInputChange(e);\n            },\n            name: \"password_confirmed\",\n            errorMsg: formData.password_confirmedError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n            onClick: () => {\n              submit();\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\nexport default connect(null, {\n  resetPassword\n})(ResetPassword);","map":{"version":3,"sources":["/home/ab/Documents/laravel-nextjs-starter-main/client/pages/user/password/reset/[token].tsx"],"names":["useRouter","Card","PrimaryButton","TextInput","H1","React","useState","UserValidator","connect","resetPassword","Alert","ResetPassword","props","router","token","query","formData","setFormData","email","emailError","password","passwordError","password_confirmed","password_confirmedError","error","handleInputChange","e","currentTarget","name","value","submit","validator","isEmailValid","validateEmail","arePasswordsValid","validatePassword","res","success","push","process","env","NEXT_PUBLIC_USER_HOME_ROUTE"],"mappings":"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","sourcesContent":["import {useRouter} from \"next/router\";\nimport {Card} from \"@/components/Card/Card\";\nimport {PrimaryButton} from \"@/components/Button/Button\";\nimport {TextInput} from \"@/components/Form/FormElement\";\nimport {H1} from \"@/components/Typography/Headers\";\nimport React, {useState} from \"react\";\nimport {UserValidator} from \"@/services/UserValidator\";\nimport {connect} from \"react-redux\";\nimport {resetPassword} from \"@/store/auth/authActions\";\nimport {Alert} from \"@/components/Alert/Alert\";\n\nfunction ResetPassword(props: any) {\n    const router = useRouter();\n    const {token} = router.query;\n\n    const [formData, setFormData] = useState<{\n        email: string;\n        emailError: string;\n        password: string;\n        passwordError: string;\n        password_confirmed: string;\n        password_confirmedError: string;\n        error: string;\n    }>({\n        email: \"\",\n        emailError: \"\",\n        password: \"\",\n        passwordError: \"\",\n        password_confirmed: \"\",\n        password_confirmedError: \"\",\n        error: \"\",\n    });\n\n    /**\n     * Handle input change.\n     *\n     * @param {object} e\n     *   The event object.\n     */\n    const handleInputChange = (e: React.FormEvent<HTMLInputElement>): void => {\n        setFormData({\n            ...formData,\n            [e.currentTarget.name]: e.currentTarget.value,\n            emailError: \"\",\n            passwordError: \"\",\n        });\n    };\n\n    /**\n     * Validate the form data and send it to the api by dispatching a redux action.\n     */\n    const submit = async (): Promise<void> => {\n        const validator: UserValidator = new UserValidator();\n\n        // Check if email is valid.\n        const isEmailValid: boolean = validator.validateEmail(formData.email);\n\n        if (!isEmailValid) {\n            setFormData({\n                ...formData,\n                emailError: \"Please enter a valid email address.\",\n            });\n            return;\n        }\n\n        // Check if passwords are valid and equal.\n        const arePasswordsValid: boolean = validator.validatePassword(\n            formData.password,\n            formData.password_confirmed,\n            8\n        );\n\n        if (!arePasswordsValid) {\n            setFormData({\n                ...formData,\n                emailError:\n                    \"Please enter a valid password and make sure you confirm it correctly.\",\n            });\n            return;\n        }\n\n        // Make API request via redux.\n        const res: any = await props.resetPassword(\n            formData.email,\n            formData.password,\n            token\n        );\n\n        // Redirect to home route on successful password reset.\n        if (res.success) {\n            router.push(process.env.NEXT_PUBLIC_USER_HOME_ROUTE);\n        }\n\n        // Display danger notification if something went wrong.\n        if (res.error) {\n            setFormData({\n                ...formData,\n                error: res.error,\n            });\n        }\n    };\n\n    // Return statement.\n    return (\n        <div className=\"w-screen h-screen relative\">\n            <div\n                className=\"absolute w-full md:w-3/5 lg:w-1/3 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                <Card\n                    additionalInnerClasses=\"justify-center items-center\"\n                    additionalWrapperClasses=\"bg-gray-100\"\n                >\n                    <>\n                        {/* Display error Message if applicable */}\n                        {formData.error && (\n                            <Alert type=\"danger\">{formData.error}</Alert>\n                        )}\n\n                        {/* Primary Header */}\n                        <H1 withMargin={true} center={true}>\n                            Reset your password\n                        </H1>\n                        <p>\n                            You now have the possibility to reset your password.\n                            Firstly, please confirm your email address and then\n                            create a new password.\n                        </p>\n\n                        {/* Email */}\n                        <TextInput\n                            type=\"text\"\n                            value={formData.email}\n                            placeholder=\"Your email address...\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"email\"\n                            errorMsg={formData.emailError}\n                        />\n\n                        {/* Password */}\n                        <TextInput\n                            type=\"password\"\n                            value={formData.password}\n                            placeholder=\"Your new password...\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"password\"\n                            errorMsg={formData.passwordError}\n                        />\n\n                        {/* Password confirmed */}\n                        <TextInput\n                            type=\"password\"\n                            value={formData.password_confirmed}\n                            placeholder=\"Confirm your new password\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"password_confirmed\"\n                            errorMsg={formData.password_confirmedError}\n                        />\n\n                        {/* Submit Button */}\n                        <PrimaryButton\n                            onClick={() => {\n                                submit();\n                            }}\n                        >\n                            Submit\n                        </PrimaryButton>\n                    </>\n                </Card>\n            </div>\n        </div>\n    );\n}\n\nexport default connect(null, {resetPassword})(ResetPassword);\n"]},"metadata":{},"sourceType":"module"}