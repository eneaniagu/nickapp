{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/SourceApi/shoppingApi/client/pages/user/register.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n|--------------------------------------------------------------------------\n| Login View.\n|--------------------------------------------------------------------------\n|\n| The view where a user can log in. Redux is used to make the api call.\n|\n*/\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { register } from \"@/store/auth/authActions\";\nimport { UserValidator } from \"@/services/UserValidator\";\nimport { Card } from \"@/components/Card/Card\";\nimport { TextInput } from \"@/components/Form/FormElement\";\nimport { H1 } from \"@/components/Typography/Headers\";\nimport { PrimaryButton } from \"@/components/Button/Button\";\nimport { Alert } from \"@/components/Alert/Alert\";\nimport Link from \"next/link\";\nimport { useRouter } from \"next/router\";\nimport { SmallSpinner } from \"@/components/Spinner/Spinner\";\n\nfunction Register(props) {\n  _s();\n\n  console.log(props); // State.\n\n  var _useState = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password_confirmed: \"\",\n    nameError: \"\",\n    emailError: \"\",\n    passwordError: \"\",\n    password_confirmedError: \"\"\n  }),\n      formData = _useState[0],\n      setFormData = _useState[1]; // The router object used for redirecting after login.\n\n\n  var router = useRouter(); // Redirect to user home route if user is authenticated.\n\n  useEffect(function () {\n    if (props.isAuthenticated) {\n      router.push(process.env.NEXT_PUBLIC_USER_HOME_ROUTE);\n    }\n  });\n  /**\n   * Handle input change.\n   *\n   * @param {object} e\n   *   The event object.\n   */\n\n  var handleInputChange = function handleInputChange(e) {\n    var _objectSpread2;\n\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, e.currentTarget.name, e.currentTarget.value), _defineProperty(_objectSpread2, \"\".concat(e.currentTarget.name, \"Error\"), \"\"), _objectSpread2)));\n  };\n  /**\n   * Submit the form.\n   */\n\n\n  var submit = function submit() {\n    var name = formData.name,\n        email = formData.email,\n        password = formData.password,\n        password_confirmed = formData.password_confirmed; // Get instance of userValidator class and validate the input.\n\n    var userValidator = new UserValidator();\n    var inputErrors = userValidator.validateRegistrationInput(name, email, password, password_confirmed, 8); // Put error to local state if we have an error.\n\n    if (typeof inputErrors === \"object\" && inputErrors !== null) {\n      setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        nameError: inputErrors.name || \"\",\n        emailError: inputErrors.email || \"\",\n        passwordError: inputErrors.password || \"\",\n        password_confirmedError: inputErrors.password || \"\"\n      }));\n      return;\n    } // Make API call if validaton was successful.\n\n\n    props.register(name, email, password, password_confirmed);\n  }; // The Return statement.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen relative\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute w-full md:w-3/5 lg:w-1/3 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        additionalInnerClasses: \"justify-center items-center\",\n        additionalWrapperClasses: \"bg-gray-100\",\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [props.registerError && /*#__PURE__*/_jsxDEV(Alert, {\n            type: \"danger\",\n            children: props.registerError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(H1, {\n            withMargin: true,\n            center: true,\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"text\",\n            value: formData.name,\n            placeholder: \"Your name...\",\n            onChange: function onChange(e) {\n              handleInputChange(e);\n            },\n            name: \"name\",\n            errorMsg: formData.nameError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"email\",\n            value: formData.email,\n            placeholder: \"Your email...\",\n            onChange: function onChange(e) {\n              handleInputChange(e);\n            },\n            name: \"email\",\n            errorMsg: formData.emailError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"password\",\n            value: formData.password,\n            placeholder: \"Your password...\",\n            onChange: function onChange(e) {\n              handleInputChange(e);\n            },\n            name: \"password\",\n            errorMsg: formData.passwordError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            type: \"password\",\n            value: formData.password_confirmed,\n            placeholder: \"Confirm your password...\",\n            onChange: function onChange(e) {\n              handleInputChange(e);\n            },\n            name: \"password_confirmed\",\n            errorMsg: formData.password_confirmedError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(PrimaryButton, {\n            onClick: function onClick() {\n              submit();\n            },\n            children: [/*#__PURE__*/_jsxDEV(SmallSpinner, {\n              show: props.loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this), \"Register\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full flex mt-3 text-blue-500\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              href: \"/user/login\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"text-xs underline\",\n                children: \"Already have an account?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n} // Map redux states to local component props.\n\n\n_s(Register, \"/dWBosT4bgO3tXZkLOD5zdVI8QA=\", false, function () {\n  return [useRouter];\n});\n\n_c = Register;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    registerError: state.auth.registerError,\n    loading: state.auth.registerLoading\n  };\n}; // Define Prop Types.\n\n\nRegister.propTypes = {\n  props: PropTypes.object,\n  register: PropTypes.func\n};\nexport default connect(mapStateToProps, {\n  register: register\n})(Register);\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/var/www/html/SourceApi/shoppingApi/client/pages/user/register.tsx"],"names":["React","useEffect","useState","connect","PropTypes","register","UserValidator","Card","TextInput","H1","PrimaryButton","Alert","Link","useRouter","SmallSpinner","Register","props","console","log","name","email","password","password_confirmed","nameError","emailError","passwordError","password_confirmedError","formData","setFormData","router","isAuthenticated","push","process","env","NEXT_PUBLIC_USER_HOME_ROUTE","handleInputChange","e","currentTarget","value","submit","userValidator","inputErrors","validateRegistrationInput","registerError","loading","mapStateToProps","state","auth","registerLoading","propTypes","object","func"],"mappings":"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","sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Login View.\n|--------------------------------------------------------------------------\n|\n| The view where a user can log in. Redux is used to make the api call.\n|\n*/\n\nimport React, {ReactElement, useEffect, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {register} from \"@/store/auth/authActions\";\nimport {UserValidator} from \"@/services/UserValidator\";\nimport {Card} from \"@/components/Card/Card\";\nimport {TextInput} from \"@/components/Form/FormElement\";\nimport {H1} from \"@/components/Typography/Headers\";\nimport {PrimaryButton} from \"@/components/Button/Button\";\nimport {Alert} from \"@/components/Alert/Alert\";\nimport Link from \"next/link\";\nimport {NextRouter, useRouter} from \"next/router\";\nimport {SmallSpinner} from \"@/components/Spinner/Spinner\";\n\nfunction Register(props: any): ReactElement {\n\n    console.log(props)\n    // State.\n    const [formData, setFormData] = useState<{\n        name: string;\n        email: string;\n        password: string;\n        password_confirmed: string;\n        nameError: string;\n        emailError: string;\n        passwordError: string;\n        password_confirmedError: string;\n    }>({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        password_confirmed: \"\",\n        nameError: \"\",\n        emailError: \"\",\n        passwordError: \"\",\n        password_confirmedError: \"\",\n    });\n\n    // The router object used for redirecting after login.\n    const router: NextRouter = useRouter();\n\n    // Redirect to user home route if user is authenticated.\n    useEffect(() => {\n        if (props.isAuthenticated) {\n            router.push(process.env.NEXT_PUBLIC_USER_HOME_ROUTE);\n        }\n    });\n\n    /**\n     * Handle input change.\n     *\n     * @param {object} e\n     *   The event object.\n     */\n    const handleInputChange = (e: React.FormEvent<HTMLInputElement>): void => {\n        setFormData({\n            ...formData,\n            [e.currentTarget.name]: e.currentTarget.value,\n            [`${e.currentTarget.name}Error`]: \"\",\n        });\n    };\n\n    /**\n     * Submit the form.\n     */\n    const submit = (): Promise<any> => {\n        const {name, email, password, password_confirmed} = formData;\n\n        // Get instance of userValidator class and validate the input.\n        const userValidator: UserValidator = new UserValidator();\n        const inputErrors: boolean | { name: string, email: string, password: string } = userValidator.validateRegistrationInput(\n            name,\n            email,\n            password,\n            password_confirmed,\n            8\n        );\n\n        // Put error to local state if we have an error.\n        if (typeof inputErrors === \"object\" && inputErrors !== null) {\n            setFormData({\n                ...formData,\n                nameError: inputErrors.name || \"\",\n                emailError: inputErrors.email || \"\",\n                passwordError: inputErrors.password || \"\",\n                password_confirmedError: inputErrors.password || \"\",\n            });\n            return;\n        }\n\n        // Make API call if validaton was successful.\n        props.register(name, email, password, password_confirmed);\n    };\n\n    // The Return statement.\n    return (\n        <div className=\"w-screen h-screen relative\">\n            <div\n                className=\"absolute w-full md:w-3/5 lg:w-1/3 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n                <Card\n                    additionalInnerClasses=\"justify-center items-center\"\n                    additionalWrapperClasses=\"bg-gray-100\"\n                >\n                    <>\n                        {/* Display error message when we have one from the server. */}\n                        {props.registerError && (\n                            <Alert type=\"danger\">{props.registerError}</Alert>\n                        )}\n\n                        {/* The main header */}\n                        <H1 withMargin={true} center={true}>\n                            Register\n                        </H1>\n\n                        {/* Name */}\n                        <TextInput\n                            type=\"text\"\n                            value={formData.name}\n                            placeholder=\"Your name...\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"name\"\n                            errorMsg={formData.nameError}\n                        />\n\n                        {/* Email */}\n                        <TextInput\n                            type=\"email\"\n                            value={formData.email}\n                            placeholder=\"Your email...\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"email\"\n                            errorMsg={formData.emailError}\n                        />\n\n                        {/* Password */}\n                        <TextInput\n                            type=\"password\"\n                            value={formData.password}\n                            placeholder=\"Your password...\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"password\"\n                            errorMsg={formData.passwordError}\n                        />\n\n                        {/* Password confirmation */}\n                        <TextInput\n                            type=\"password\"\n                            value={formData.password_confirmed}\n                            placeholder=\"Confirm your password...\"\n                            onChange={(e) => {\n                                handleInputChange(e);\n                            }}\n                            name=\"password_confirmed\"\n                            errorMsg={formData.password_confirmedError}\n                        />\n\n                        {/* Submit button */}\n                        <PrimaryButton\n                            onClick={() => {\n                                submit();\n                            }}\n                        >\n                            <SmallSpinner show={props.loading}/>\n                            Register\n                        </PrimaryButton>\n\n                        {/* Additional links. */}\n                        <div className=\"w-full flex mt-3 text-blue-500\">\n                            <Link href=\"/user/login\">\n                                <a className=\"text-xs underline\">\n                                    Already have an account?\n                                </a>\n                            </Link>\n                        </div>\n                    </>\n                </Card>\n            </div>\n        </div>\n    );\n}\n\n// Map redux states to local component props.\nconst mapStateToProps = (state: any) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    registerError: state.auth.registerError,\n    loading: state.auth.registerLoading,\n});\n\n// Define Prop Types.\nRegister.propTypes = {\n    props: PropTypes.object,\n    register: PropTypes.func,\n};\nexport default connect(mapStateToProps, {register})(Register);\n"]},"metadata":{},"sourceType":"module"}