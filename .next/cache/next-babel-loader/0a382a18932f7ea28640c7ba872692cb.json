{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ab/Documents/laravel-nextjs-starter-main/client/components/Dashboard/ChartComponent.js\";\nimport Chart from 'chart.js/auto';\nimport { getRelativePosition } from 'chart.js/helpers';\n\nfunction ChartComponent() {\n  var chart = new Chart(ctx, {\n    type: 'line',\n    data: data,\n    options: {\n      onClick: function onClick(e) {\n        var canvasPosition = getRelativePosition(e, chart); // Substitute the appropriate scale IDs\n\n        var dataX = chart.scales.x.getValueForPixel(canvasPosition.x);\n        var dataY = chart.scales.y.getValueForPixel(canvasPosition.y);\n      }\n    }\n  });\n  var config = {\n    type: 'line',\n    data: data,\n    options: {\n      animations: {\n        radius: {\n          duration: 400,\n          easing: 'linear',\n          loop: function loop(context) {\n            return context.active;\n          }\n        }\n      },\n      hoverRadius: 12,\n      hoverBackgroundColor: 'yellow',\n      interaction: {\n        mode: 'nearest',\n        intersect: false,\n        axis: 'x'\n      },\n      plugins: {\n        tooltip: {\n          enabled: false\n        }\n      }\n    }\n  };\n  var DATA_COUNT = 7;\n  var NUMBER_CFG = {\n    count: DATA_COUNT,\n    min: -100,\n    max: 100\n  };\n  var labels = Utils.months({\n    count: DATA_COUNT\n  });\n  var data = {\n    labels: labels,\n    datasets: [{\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      tension: 0.4\n    }, {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      tension: 0.2\n    }]\n  };\n  var actions = [{\n    name: 'Randomize',\n    handler: function handler(chart) {\n      chart.data.datasets.forEach(function (dataset) {\n        dataset.data = Utils.numbers({\n          count: chart.data.labels.length,\n          min: -100,\n          max: 100\n        });\n      });\n      chart.update();\n    }\n  }, {\n    name: 'Add Dataset',\n    handler: function handler(chart) {\n      var data = chart.data;\n      var dsColor = Utils.namedColor(chart.data.datasets.length);\n      var newDataset = {\n        label: 'Dataset ' + (data.datasets.length + 1),\n        backgroundColor: Utils.transparentize(dsColor, 0.5),\n        borderColor: dsColor,\n        data: Utils.numbers({\n          count: data.labels.length,\n          min: -100,\n          max: 100\n        })\n      };\n      chart.data.datasets.push(newDataset);\n      chart.update();\n    }\n  }, {\n    name: 'Add Data',\n    handler: function handler(chart) {\n      var data = chart.data;\n\n      if (data.datasets.length > 0) {\n        data.labels = Utils.months({\n          count: data.labels.length + 1\n        });\n\n        for (var index = 0; index < data.datasets.length; ++index) {\n          data.datasets[index].data.push(Utils.rand(-100, 100));\n        }\n\n        chart.update();\n      }\n    }\n  }, {\n    name: 'Remove Dataset',\n    handler: function handler(chart) {\n      chart.data.datasets.pop();\n      chart.update();\n    }\n  }, {\n    name: 'Remove Data',\n    handler: function handler(chart) {\n      chart.data.labels.splice(-1, 1); // remove the label first\n\n      chart.data.datasets.forEach(function (dataset) {\n        dataset.data.pop();\n      });\n      chart.update();\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ChartComponent;\nexport default ChartComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartComponent\");","map":{"version":3,"sources":["/home/ab/Documents/laravel-nextjs-starter-main/client/components/Dashboard/ChartComponent.js"],"names":["Chart","getRelativePosition","ChartComponent","chart","ctx","type","data","options","onClick","e","canvasPosition","dataX","scales","x","getValueForPixel","dataY","y","config","animations","radius","duration","easing","loop","context","active","hoverRadius","hoverBackgroundColor","interaction","mode","intersect","axis","plugins","tooltip","enabled","DATA_COUNT","NUMBER_CFG","count","min","max","labels","Utils","months","datasets","label","numbers","borderColor","CHART_COLORS","red","backgroundColor","transparentize","tension","blue","actions","name","handler","forEach","dataset","length","update","dsColor","namedColor","newDataset","push","index","rand","pop","splice"],"mappings":"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","sourcesContent":["import Chart from 'chart.js/auto';\nimport { getRelativePosition } from 'chart.js/helpers';\n\n\n\n\nfunction ChartComponent() {\n\n    const chart = new Chart(ctx, {\n        type: 'line',\n        data: data,\n        options: {\n          onClick: (e) => {\n            const canvasPosition = getRelativePosition(e, chart);\n      \n            // Substitute the appropriate scale IDs\n            const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);\n            const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);\n          }\n        }\n      })\n\n      const config = {\n        type: 'line',\n        data: data,\n        options: {\n          animations: {\n            radius: {\n              duration: 400,\n              easing: 'linear',\n              loop: (context) => context.active\n            }\n          },\n          hoverRadius: 12,\n          hoverBackgroundColor: 'yellow',\n          interaction: {\n            mode: 'nearest',\n            intersect: false,\n            axis: 'x'\n          },\n          plugins: {\n            tooltip: {\n              enabled: false\n            }\n          }\n        },\n      };\n\n      const DATA_COUNT = 7;\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100};\n\nconst labels = Utils.months({count: DATA_COUNT});\nconst data = {\n  labels: labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.red,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),\n      tension: 0.4,\n    },\n    {\n      label: 'Dataset 2',\n      data: Utils.numbers(NUMBER_CFG),\n      borderColor: Utils.CHART_COLORS.blue,\n      backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),\n      tension: 0.2,\n    }\n  ]\n};\n\nconst actions = [\n    {\n      name: 'Randomize',\n      handler(chart) {\n        chart.data.datasets.forEach(dataset => {\n          dataset.data = Utils.numbers({count: chart.data.labels.length, min: -100, max: 100});\n        });\n        chart.update();\n      }\n    },\n    {\n      name: 'Add Dataset',\n      handler(chart) {\n        const data = chart.data;\n        const dsColor = Utils.namedColor(chart.data.datasets.length);\n        const newDataset = {\n          label: 'Dataset ' + (data.datasets.length + 1),\n          backgroundColor: Utils.transparentize(dsColor, 0.5),\n          borderColor: dsColor,\n          data: Utils.numbers({count: data.labels.length, min: -100, max: 100}),\n        };\n        chart.data.datasets.push(newDataset);\n        chart.update();\n      }\n    },\n    {\n      name: 'Add Data',\n      handler(chart) {\n        const data = chart.data;\n        if (data.datasets.length > 0) {\n          data.labels = Utils.months({count: data.labels.length + 1});\n  \n          for (var index = 0; index < data.datasets.length; ++index) {\n            data.datasets[index].data.push(Utils.rand(-100, 100));\n          }\n  \n          chart.update();\n        }\n      }\n    },\n    {\n      name: 'Remove Dataset',\n      handler(chart) {\n        chart.data.datasets.pop();\n        chart.update();\n      }\n    },\n    {\n      name: 'Remove Data',\n      handler(chart) {\n        chart.data.labels.splice(-1, 1); // remove the label first\n  \n        chart.data.datasets.forEach(dataset => {\n          dataset.data.pop();\n        });\n  \n        chart.update();\n      }\n    }\n  ];\n\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default ChartComponent\n"]},"metadata":{},"sourceType":"module"}