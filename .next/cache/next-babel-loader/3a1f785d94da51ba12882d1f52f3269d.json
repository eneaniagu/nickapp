{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\"; // Reducers.\n\nimport auth from \"./auth/authReducer\";\nimport alert from \"./alert/alertReducer\";\n// The inital state. Will be merged with partials states.\nvar initState = {}; // Combine all partial reducers.\n\nvar rootReducer = combineReducers({\n  alert: alert,\n  auth: auth // AddProduct,\n\n});\nvar middleware = [thunk]; // Create reduc store of all existing stores. Also init devtools.\n\nvar store = createStore(rootReducer, initState, composeWithDevTools(applyMiddleware.apply(void 0, middleware)));\nexport default store;","map":{"version":3,"sources":["/home/ab/Documents/laravel-nextjs-starter-main/client/store/store.tsx"],"names":["createStore","applyMiddleware","combineReducers","composeWithDevTools","thunk","auth","alert","initState","rootReducer","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AAGA;AACA,IAAMC,SAAS,GAAG,EAAlB,C,CAEA;;AACA,IAAMC,WAAW,GAAGN,eAAe,CAAC;AAChCI,EAAAA,KAAK,EAALA,KADgC;AAEhCD,EAAAA,IAAI,EAAJA,IAFgC,CAGhC;;AAHgC,CAAD,CAAnC;AAMA,IAAMI,UAAU,GAAG,CAACL,KAAD,CAAnB,C,CAEA;;AACA,IAAMM,KAAK,GAAGV,WAAW,CACrBQ,WADqB,EAErBD,SAFqB,EAGrBJ,mBAAmB,CAACF,eAAe,MAAf,SAAmBQ,UAAnB,CAAD,CAHE,CAAzB;AAMA,eAAeC,KAAf","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\n// Reducers.\nimport auth from \"./auth/authReducer\";\nimport alert from \"./alert/alertReducer\";\nimport AddProduct from './Tanent/reducer'\n\n// The inital state. Will be merged with partials states.\nconst initState = {};\n\n// Combine all partial reducers.\nconst rootReducer = combineReducers({\n    alert,\n    auth,\n    // AddProduct,\n});\n\nconst middleware = [thunk];\n\n// Create reduc store of all existing stores. Also init devtools.\nconst store = createStore(\n    rootReducer,\n    initState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}